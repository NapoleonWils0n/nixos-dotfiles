#TITLE: nixos dotfiles
#+STARTUP: overview hideblocks
#+OPTIONS: num:nil author:nil
#+PROPERTY: header-args :mkdirp yes
* tangle dotfiles
** tangle document

C-c C-v t

** tangle only one code block

C-u C-c C-v t

** tangle from the command line

#+begin_src sh
emacs --batch -l org --eval '(org-babel-tangle-file "~/git/ubuntu-dotfiles/ubuntu-dotfiles.org")'
#+end_src

* flake update

update the flake

#+begin_src sh
nix flake update 
#+end_src

run home manager switch with the flake option

#+begin_src sh
home-manager switch --flake '.#djwilcox@pollux'
#+end_src

commit the files and push the git repo

#+begin_src sh
git add .
git commit -m "flake updated"
git push github master
#+end_src

if there are any errors you can revert the flake.lock file

#+begin_src sh
git checkout 'HEAD^' -- flake.lock
#+end_src

This command will revert flake.lock to its state in the previous commit.

If you updated multiple times, you might need to go back further
e.g., HEAD~2 for two commits ago, or look at

#+begin_src sh
git log --oneline flake.lock
#+end_src

to find the exact commit hash

* nixos dotfiles
** home-manager
*** home-manager config
**** home.nix

#+NAME: home.nix
#+BEGIN_SRC nix
,#+begin_src nix
{
  config,
  pkgs,
  pkgs-ee930f975,
  ...
}:

{
  # Home Manager needs a bit of information about you and the paths it should
  # manage.
  home.username = "djwilcox";
  home.homeDirectory = "/home/djwilcox";

  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  # You should not change this value, even if you update Home Manager. If you do
  # want to update the value, then make sure to first check the Home Manager
  # release notes.
  home.stateVersion = "25.05"; # Please read the comment before changing.

  imports = [
    ./programs/dconf/dconf.nix
    ./programs/firefox/firefox.nix
  ];
 
  # xdg directories
  xdg = {
    userDirs = {
      enable = true;
      createDirectories = true;
      publicShare = null;
      templates = null;
    };
  };

  nixpkgs.config.allowUnfree = true;
  
  programs.emacs = {
    enable = true;
    package = pkgs.emacs-pgtk;
  };

  # --- OBS Studio Configuration for wlrobs ---
  programs.obs-studio = {
    enable = true;
    plugins = with pkgs; [
      obs-studio-plugins.wlrobs
    ];
  };

  # The home.packages option allows you to install Nix packages into your
  # environment.
  home.packages = with pkgs; [
    abook
    apg
    alacritty
    aria2
    ardour
    aspell
    aspellDicts.en
    bat
    bc
    chromium
    curl
    pkgs-ee930f975.davinci-resolve # use pkgs-ee930f975 instead of unstable
    dict
    dconf-editor
    fd
    fdk-aac-encoder
    ffmpeg-full
    file
    fira-code
    git
    gnome-tweaks
    gnumake
    grim
    handbrake
    imagemagick
    iosevka
    libnotify
    libwebp
    lsp-plugins
    kodi-wayland
    mpc
    mpd
    mpv
    ncdu
    ncmpc
    nerd-fonts.fira-code
    noise-repellent
    noto-fonts-emoji
    nsxiv
    oath-toolkit
    openvpn
    pandoc
    pinentry-curses
    playerctl
    qpwgraph
    realesrgan-ncnn-vulkan
    rnnoise-plugin
    ripgrep
    sox
    tofi
    tmux
    translate-shell
    transmission_4-gtk
    tree
    ts
    unzip
    yt-dlp
    wbg
    wget
    widevine-cdm
    wl-clipboard
    wlrctl
    wlr-which-key
    zathura
    zip
  ];

  # home sessions variables
  home.sessionVariables = {
    XCURSOR_THEME = "Adwaita";
    XCURSOR_SIZE = "24";
  };

services = {
  emacs = {
    enable = true;
    package = pkgs.emacs-pgtk;
  };
  gnome-keyring = {
    enable = true;
  };
  gpg-agent = {
    enable = true;
    extraConfig = ''
      allow-emacs-pinentry
      allow-loopback-pinentry
    '';
  };
  mpd = {
    enable = true;
    musicDirectory = "~/Music";
    network = {
      startWhenNeeded = true;
    };
    extraConfig = ''
      audio_output {
        type "pipewire"
        name "My PipeWire Output"
      }
    '';
  };
};

# systemd
systemd.user.sessionVariables = {
  SSH_AUTH_SOCK = "/run/user/1000/keyring/ssh";
  WAYLAND_DISPLAY = "wayland-0";
};

# gtk
gtk = {
  enable = true;
  gtk3.extraConfig = {
    gtk-application-prefer-dark-theme = true;
  };
  gtk4.extraConfig = {
    gtk-application-prefer-dark-theme = true;
  };
};

# mpv mpris 
nixpkgs.overlays = [
  (self: super: {
    mpv = super.mpv.override {
      scripts = [ self.mpvScripts.mpris ];
    };
  })
];

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
    # # Building this configuration will create a copy of 'dotfiles/screenrc' in
    # # the Nix store. Activating the configuration will then make '~/.screenrc' a
    # # symlink to the Nix store copy.
    # ".screenrc".source = dotfiles/screenrc;

    # # You can also set the file content immediately.
    # ".gradle/gradle.properties".text = ''
    #   org.gradle.console=verbose
    #   org.gradle.daemon.idletimeout=3600000
    # '';
  };

  # Home Manager can also manage your environment variables through
  # 'home.sessionVariables'. These will be explicitly sourced when using a
  # shell provided by Home Manager. If you don't want to manage your shell
  # through Home Manager then you have to manually source 'hm-session-vars.sh'
  # located at either
  #
  #  ~/.nix-profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  ~/.local/state/nix/profiles/profile/etc/profile.d/hm-session-vars.sh
  #
  # or
  #
  #  /etc/profiles/per-user/djwilcox/etc/profile.d/hm-session-vars.sh
  #
  home.sessionVariables = {
    # EDITOR = "emacs";
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
}
#+END_SRC

**** firefox.nix

#+NAME: firefox.nix
#+begin_src nix
{ pkgs, ... }:

{

  programs.firefox = {
    enable = true;
    package = pkgs.wrapFirefox pkgs.firefox-unwrapped {
    extraPolicies = {
      DisableFirefoxStudies = true;
      DisablePocket = true;
      DisableTelemetry = true;
      DisableFirefoxAccounts = true;
      NoDefaultBookmarks = true;
      OfferToSaveLogins = false;
      OffertosaveloginsDefault = false;
      PasswordManagerEnabled = false;
      };
    };
      profiles = {
        default = {
          isDefault = true;
          extraConfig = ''
          // beacon = false
          user_pref("beacon.enabled", false);
          // about config warning = false
          user_pref("browser.aboutConfig.showWarning", false); 
          // strictcontent blocking
          user_pref("browser.contentblocking.category", "strict");
          // download dont open panel in toolbar
          user_pref("browser.download.alwaysOpenPanel", false);
          // downloads button
          user_pref("browser.engagement.downloads-button.has-used", true);
          // tab manager = false
          user_pref("browser.tabs.tabmanager.enabled", false);
          // safebrowsing = false
          user_pref("browser.safebrowsing.appRepURL", "");
          user_pref("browser.safebrowsing.malware.enabled", false);
          // browser search
          user_pref("browser.search.hiddenOneOffs", "Google,Yahoo,Bing,Amazon.com,Twitter");
          // browser search suggest = false
          user_pref("browser.search.suggest.enabled", false);
          // search bar in toolbar
          user_pref("browser.search.widget.inNavBar", true);
          // browser send pings = false
          user_pref("browser.send_pings", false);
          // homepage blank
          user_pref("browser.startup.homepage", "about:blank");
          // startup page
          user_pref("browser.startup.page", "3");
          // startup homepage = blank
          user_pref("browser.startup.homepage", "about:blank");
          // tabs firefox view = false
          user_pref("browser.tabs.firefox-view", false);
          // tabmanager = false
          user_pref("browser.tabs.tabmanager.enabled", false);
          // newtab = false
          user_pref("browser.newtabpage.enabled", false);
          // activity stream
          user_pref("browser.newtabpage.activity-stream.showSeach", false);
          user_pref("browser.newtabpage.activity-stream.showSponsored", false);
          user_pref("browser.newtabpage.activity-stream.showSponsoredTopSites", false);
          user_pref("browser.newtabpage.activity-stream.feeds.topsites", false);
          // bookmarks toolbar visibility = never
          user_pref("browser.toolbars.bookmarks.visibility", "never");
          // browser ui density
          user_pref("browser.uidensity", "1");
          // urlbar speculativeconnect = false
          user_pref("browser.urlbar.speculativeConnect.enabled", false);
          // urlbar bookmarks = false
          user_pref("browser.urlbar.shortcuts.bookmarks", false);
          // urlbar history = false
          user_pref("browser.urlbar.shortcuts.history", false);
          // urlbar shortcuts tabs = false
          user_pref("browser.urlbar.shortcuts.tabs", false);
          // urlbar show search suggestions first = false
          user_pref("browser.urlbar.showSearchSuggestionsFirst", false);
          // urlbar suggest bookmarks = false
          user_pref("browser.urlbar.suggest.bookmark", false);
          // urlbar suggest engines = false
          user_pref("browser.urlbar.suggest.engines", false);
          // urlbar suggest history = false
          user_pref("browser.urlbar.suggest.history", false);
          // urlbar suggest open page = false
          user_pref("browser.urlbar.suggest.openpage", false);
          // urlbar suggest searches = false
          user_pref("browser.urlbar.suggest.searches", false);
          // urlbar suggest topsites = false
          user_pref("browser.urlbar.suggest.topsites", false);
          // firefox healthreport upload = false
          user_pref("datareporting.healthreport.uploadEnabled", false);
          // dont let sites disable copy and paste
          user_pref("dom.event.clipboardevents.enabled", false);
          // https mode = true
          user_pref("dom.security.https_only_mode", true);
          // experiments = false
          user_pref("experiments.activeExperiment", false);
          user_pref("experiments.enabled", false);
          user_pref("experiments.supported", false);
          // remove unifiedextensions
          user_pref("extensions.unifiedExtensions.enabled", false);
          // pocket show on home screen = false
          user_pref("extensions.pocket.enabled", false);
          user_pref("extensions.pocket.showHome", false);
          user_pref("extensions.pocket.onSaveRecs", false);
          user_pref("services.sync.prefs.sync.browser.newtabpage.activity-stream.section.highlights.includePocket", false);
          user_pref("browser.newtabpage.activity-stream.section.highlights.includePocket", false);
          // creditcards autofill = false
          user_pref("extensions.formautofill.creditCards.available", false);
          // smoothscroll = false
          user_pref("general.smoothScroll", false);
          // geo = false
          user_pref("geo.enabled", false);
          // general
          user_pref("gfx.webrender.all", true);
          user_pref("layout.css.devPixelsPerPx", "1");
          // media autoplay = 5
          user_pref("media.autoplay.default", "5");
          user_pref("media.navigator.enabled", false);
          user_pref("media.video_stats.enabled", false);
          // show punycode in the urlbar
          user_pref("network.IDN_show_punycode", true);
          // network
          user_pref("network.allow-experiments", false);
          user_pref("network.dns.disablePrefetch", true);
          user_pref("network.http.referer.XOriginPolicy", "2");
          user_pref("network.http.referer.XOriginTrimmingPolicy", "2");
          user_pref("network.http.referer.trimmingPolicy", "1");
          user_pref("network.prefetch-next", false);
          // magnet links
          user_pref("network.protocol-handler.expose.magnet", false);
          // default shortcuts
          user_pref("permissions.default.shortcuts", "2");
          // privacy dont track = true
          user_pref("privacy.donottrackheader.enabled", true);
          user_pref("privacy.donottrackheader.value", "1");
          user_pref("privacy.firstparty.isolate", true);
          user_pref("signon.rememberSignons", false);
          // disable firefox vpn ad
          user_pref("browser.vpn_promo.enabled", false);
          // custom google search
          user_pref("browser.urlbar.update2.engineAliasRefresh", true);
          // disable privacy-preserving attribution 
          user_pref("dom.private-attribution.submission.enabled", false);
          // desktop notifications
          user_pref("alerts.useSystemBackend", true);
          // sidebar - off
          user_pref("sidebar.revamp", false);
          // sidebar visibility
          user_pref("sidebar.visibility", "hide-sidebar");
          // sidebar tools
          user_pref("sidebar.main.tools", "history");
          // vertical tabs - off
          user_pref("sidebar.verticalTabs", false);
          // css stylesheets = true
          user_pref("toolkit.legacyUserProfileCustomizations.stylesheets", true);
          // theme
          user_pref("widget.content.gtk-theme-override", "Adwaita:dark");
          // trim urls
          user_pref("browser.urlbar.trimURLs", false);
          '';
          userChrome = ''
          /* userChrome.css */
          
          @namespace url("http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"); /* only needed once */
          /* hide close, minimize window buttons */
          .titlebar-min {display:none!important;}
          .titlebar-max {display:none!important;}
          .titlebar-restore {display:none!important;}
          .titlebar-close {display:none!important;}
          
          /* remove the bookmark star in the url bar */
          #star-button-box {display: none !important}
          
          /* Remove items from Firefox menu */
          #context-sendimage, /* email */
          #context-bookmarklink, /* bookmark link */
          /* #context-savelink, save link */
          #context-take-screenshot, /* take screenshot */
          /* #context-openlinkintab, open link in tab */
          /* #context-openlink, open link in new window */
          #context-openlinkprivate, /* open link in private window */
          #context-searchselect, /* search for */
          #context-searchselect-private, /* search for private */
          #context-inspect-a11y, /* accessability */
          #context-savepage, /* save page */
          #context-selectall, /* select all */
          #context-viewsource, /* view source */
          #context-back, /* back */
          #context-forward, /* forward */
          #context-reload, /* reload */
          #context-bookmarkpage,/* edit this bookmark */
          #context-media-playbackrate, /* speed in video menu */
          #context-media-loop, /* loop video */ 
          #context-sendvideo, /* email video */
          #context-sendaudio, /* email audio */
          #context-sendimage, /* email image */
          #context-undo, /* undo */
          #context-redo, /* redo */
          #context-cut, /* cut */
          #context-delete, /* delete */
          #context-keywordfield, /* add a keyword for this search */
          #context-selectall, /* select all */
          #alltabs-button 
          {display: none !important;}
          '';
          settings = {
            "media.gmp-widevinecdm.enabled" = true;
            "media.gmp-widevinecdm.providerName" = "Widevine Content Decryption Module";
            "media.gmp-widevinecdm.binaryURL" = ""; # Leave empty to force use of system copy
            "media.gmp-widevinecdm.version" = "${pkgs.widevine-cdm.version}";
            "media.eme.enabled" = true;
          };
         };
        };
      };
}
#+end_src

**** dconf.nix

#+NAME: dconf.nix
#+begin_src nix
{ lib, ... }:

with lib.hm.gvariant;

{
  dconf.settings = {
    "org/gnome/desktop/input-sources" = {
     color-scheme = "prefer-dark";
    };
    "org/gnome/desktop/input-sources" = {
      xkb-options = [ "ctrl:swap_lalt_lctl,custom:swap_sterling_numbersign,caps:none" ];
      per-window = false;
      show-all-sources = true;
    };
    "org/gnome/desktop/interface" = {
      clock-show-date = false;
      clock-show-weekday = false;
      color-scheme = "prefer-dark";
      enable-animations = false;
    };
    "org/gnome/desktop/peripherals/touchpad" = {
      natural-scroll = false;
      two-finger-scrolling-enabled = true;
    };
    "org/gnome/desktop/wm/keybindings" = {
      close = ["<Shift><Super>c"];
      minimize = [""];
      move-to-monitor-left = ["<Shift><Super>h"];
      move-to-monitor-right = ["<Shift><Super>l"];
      move-to-workspace-1 = ["<Shift><Super>exclam"];
      move-to-workspace-2 = ["<Shift><Super>at"];
      move-to-workspace-3 = ["<Shift><Super>sterling"];
      move-to-workspace-4 = ["<Shift><Super>dollar"];
      switch-applications = ["<Super>j"];
      switch-applications-backward = ["<Super>k"];
      switch-to-workspace-1 = ["<Super>1"];
      switch-to-workspace-2 = ["<Super>2"];
      switch-to-workspace-3 = ["<Super>3"];
      switch-to-workspace-4 = ["<Super>4"];
      switch-to-workspace-5 = ["<Super>5"];
      switch-to-workspace-6 = ["<Super>6"];
      switch-to-workspace-7 = ["<Super>7"];
      switch-to-workspace-8 = ["<Super>8"];
      switch-to-workspace-9 = ["<Super>9"];
      switch-to-workspace-left = ["<Super>h"];
      switch-to-workspace-right = ["<Super>l"];
    };
    "org/gnome/mutter" = {
      center-new-windows = true;
      dynamic-workspaces = true;
      focus-change-on-pointer-rest = false;
      overlay-key = "Super_L";
      workspaces-only-on-primary = true;
    };
    "org/gnome/settings-daemon/plugins/media-keys" = {
      play = ["<Alt><Super>space"];
      volume-step = 5;
    };
    "org/gnome/settings-daemon/power" = {
      idle-dim = false;
      sleep-inactive-ac-timeout = 3600;
      sleep-inactive-ac-type = "nothing";
    };
    "org/gnome/shell/keybindings" = {
      switch-to-application-1 = [""];
      switch-to-application-2 = [""];
      switch-to-application-3 = [""];
      switch-to-application-4 = [""];
      switch-to-application-5 = [""];
      switch-to-application-6 = [""];
      switch-to-application-7 = [""];
      switch-to-application-8 = [""];
      switch-to-application-9 = [""];
      toggle-application-view = ["<Primary><Super>p"];
    };
    "org/gnome/shell/ubuntu" = {
      color-scheme = "prefer-dark";
    };
    "org/gnome/system/location" = {
      enabled = false;
    };
    "org/gnome/desktop/wm/preferences" = {
      audible-bell = false;
      auto-raise = true;
      focus-mode = "sloppy";
    };
  };
}
#+end_src

*** home-manager tangle
**** home.nix tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ home dir

#+NAME: home.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/.config/home-manager/home.nix"
<<home.nix>>
#+END_SRC
  
+ current dir

#+NAME: home.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle ".config/home-manager/home.nix"
<<home.nix>>
#+END_SRC

**** firefox.nix tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ home dir

#+NAME: firefox.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/.config/home-manager/programs/firefox/firefox.nix"
<<firefox.nix>>
#+END_SRC
  
+ current dir

#+NAME: firefox.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle ".config/home-manager/programs/firefox/firefox.nix"
<<firefox.nix>>
#+END_SRC

**** dconf.nix tangle
:PROPERTIES:
:ORDERED:  t
:END:

+ home dir

#+NAME: dconf.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/.config/home-manager/programs/dconf/dconf.nix"
<<dconf.nix>>
#+END_SRC
  
+ current dir

#+NAME: dconf.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle ".config/home-manager/programs/dconf/dconf.nix"
<<dconf.nix>>
#+END_SRC

** flake.nix
*** flake.nix config

#+NAME: flake.nix
#+begin_src nix
# ~/git/nixos-dotfiles/flake.nix
{
  description = "Home Manager configuration for djwilcox on pollux";

  inputs = {
    # Nixpkgs, pointing to the unstable branch for the latest packages
    nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";

    # davinci resolve fix
    # You can also use a specific git commit hash to lock the version
    nixpkgs-ee930f975.url = "github:nixos/nixpkgs/ee930f9755f58096ac6e8ca94a1887e0534e2d81";

    # Home Manager itself
    home-manager = {
      url = "github:nix-community/home-manager"; # Defaults to master/unstable branch [1]
      # Crucial: Ensure Home Manager uses the same Nixpkgs as this flake
      # to prevent version conflicts and ensure consistency. [1, 2]
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs = inputs@{
    self,
    nixpkgs,
    nixpkgs-ee930f975,
    home-manager,
    ... }:
    let
      # Define the system architecture
      system = "x86_64-linux"; # For your MacBook Air 2011
      # Define your username
      username = "djwilcox"; # Replace with your actual username if different
    in
    {
      # Define the Home Manager configuration for your user on this host
      # The attribute name is typically "username@hostname" for standalone setups [3]
      homeConfigurations."${username}@pollux" = home-manager.lib.homeManagerConfiguration {
        # Pass the Nixpkgs instance to Home Manager
        pkgs = nixpkgs.legacyPackages.${system}; # Use the unstable nixpkgs for packages [3]
        
        # Pass extra arguments to your home.nix if needed.
        # For example, if your home.nix needs access to the 'inputs' set:
        extraSpecialArgs = {
          pkgs-ee930f975 = import nixpkgs-ee930f975 {
            inherit system;
            config.allowUnfree = true;
          };
        };
        
        # Import your existing home.nix file from its relative path within this repository [3]
        modules = [
        ./.config/home-manager/home.nix # Your existing Home Manager configuration
        ];
      };
    };
}
#+end_src

*** flake.nix tangle

+ current dir

#+NAME: flake.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "flake.nix"
<<flake.nix>>
#+END_SRC

** nixpkgs
*** config.nix
**** config.nix config

#+NAME: config.nix
#+begin_src nix
{
  allowUnfree = true;
  http2 = false; # Disable HTTP/2
  system-openssl = true; # Use system OpenSSL
}
#+end_src

**** config.nix tangle

+ home dir

#+NAME: config.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/.config/nixpkgs/config.nix"
<<config.nix>>
#+END_SRC
  
+ current dir

#+NAME: config.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle ".config/nixpkgs/config.nix"
<<config.nix>>
#+END_SRC

** tofi
*** tofi config

#+NAME: tofi
#+BEGIN_SRC conf
anchor = top
#output = "eDP-1"
border-width = 0
drun-launch = true
font = "~/.nix-profile/share/fonts/truetype/Iosevka-Bold.ttf"
font-size = 12
height = 32
hint-font = false
horizontal = true
min-input-width = 0
num-results = 10
outline-width = 0
padding-bottom = 0
padding-left = 0
padding-right = 0
padding-top = 0
prompt-color = #eee8d5
prompt-text = ""
input-color = #eee8d5
result-spacing = 18
selection-color = #002b36
default-result-color = #eee8d5
text-color = #eee8d5
width = 100%
default-result-background = #073642
selection-background = #268bd2
background-color = #005577 
#background-color = #2b2b2b
prompt-background=#002b36
selection-background-padding = 4
#selection-background-corner-radius = 6
default-result-background-padding = 4
#default-result-background-corner-radius = 6
#+END_SRC

*** tofi tangle

+ home dir

#+NAME: tofi-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/tofi/config"
<<tofi>>
#+END_SRC

+ current dir

#+NAME: tofi-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/tofi/config"
<<tofi>>
#+END_SRC

** wlr-which-key
*** wlr-which-key config

#+NAME: wlr-which-key
#+BEGIN_SRC yaml
# Theming
font: Fira Code 18
background: "#282828d0"
color: "#fbf1c7"
border: "#005577"
separator: " ➜ "
border_width: 2
corner_r: 10
padding: 15 # Defaults to corner_r

# Anchor and margin
anchor: center # One of center, left, right, top, bottom, bottom-left, top-left, etc.
# Only relevant when anchor is not center
margin_right: 0
margin_bottom: 0
margin_left: 0
margin_top: 0

menu: 
  "w":
    desc: general
    submenu:
      "m": { desc: mpv, cmd: emacsclient -cF "((visibility . nil))" -e "(mpv-play-clipboard)" }
      "p": { desc: pinch, cmd: /home/djwilcox/bin/pinch -i "$(wl-paste)" }
      "y": { desc: yt-dlp, cmd: ts yt-dlp "$(wl-paste)" -o "$HOME/downloads/%(title)s.%(ext)s" }
  "s":
    desc: screenshot
    submenu:
      "l": { desc: laptop, cmd: grim -o eDP-1 }
      "m": { desc: monitor, cmd: grim -o DP-3 }
      "b": { desc: both, cmd: grim }
#+END_SRC

*** wlr-which-key tangle

+ home dir

#+NAME: wlr-which-key-home-dir
#+BEGIN_SRC yaml :noweb yes :tangle "~/.config/wlr-which-key/config.yaml"
<<wlr-which-key>>
#+END_SRC

+ current dir

#+NAME: wlr-which-key-current-dir
#+BEGIN_SRC yaml :noweb yes :tangle ".config/wlr-which-key/config.yaml"
<<wlr-which-key>>
#+END_SRC

** systemd
*** systemd config
**** status-bar.service

#+NAME: status-bar.service
#+BEGIN_SRC conf
[Unit]
Description=dwl Custom Status Bar Feeder
After=graphical-session.target
BindsTo=graphical-session.target

[Service]
ExecStart=/home/djwilcox/bin/status-bar
Restart=on-failure
RestartSec=5
Type=simple

[Install]
WantedBy=graphical-session.target
#+END_SRC

**** wallpaper.service

#+NAME: wallpaper.service
#+BEGIN_SRC conf
[Unit]
Description=wbg wlroots wallpaper
After=graphical-session.target
BindsTo=graphical-session.target

[Service]
ExecStart=/home/djwilcox/bin/wallpaper
Restart=on-failure
RestartSec=5
Type=simple

[Install]
WantedBy=graphical-session.target
#+END_SRC

*** systemd tangle
**** status-bar.service

+ home dir

#+NAME: status-bar.service-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/systemd/user/status-bar.service"
<<status-bar.service>>
#+END_SRC

+ current dir

#+NAME: status-bar.service-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/systemd/user/status-bar.service"
<<status-bar.service>>
#+END_SRC

**** wallpaper.service

+ home dir

#+NAME: wallpaper.service-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/systemd/user/wallpaper.service"
<<wallpaper.service>>
#+END_SRC

+ current dir

#+NAME: wallpaper.service-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/systemd/user/wallpaper.service"
<<wallpaper.service>>
#+END_SRC

*** enable status-bar.service

enable the status-bar.service

#+begin_src sh
systemctl --user daemon-reload 
systemctl --user enable status-bar.service 
#+end_src

*** enable wallpaper.service

enable the wallpaper.service

#+begin_src sh
systemctl --user daemon-reload 
systemctl --user enable wallpaper.service 
#+end_src

** nix
*** gemini-cli
**** gemini-cli config
***** gemini-cli flake.nix

#+begin_src sh
nix develop
#+end_src

update

#+begin_src sh
nix flake update
nix develop
#+end_src

then commit lock file

#+NAME: gemini-cli-flake.nix
#+begin_src nix
{
  description = "gemini-cli";

  inputs = {
    nixpkgs.url = "github:NixOS/Nixpkgs/nixos-unstable"; 
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true; 
          };
        };
      in
      {
        devShells.default = pkgs.mkShell rec {
          name = "gemini-cli-shell";

          # build inputs 
          buildInputs = with pkgs; [
            gemini-cli
          ];

          # Shell hook 
          shellHook = ''
            echo "Welcome to the gemini-cli development shell!"
            echo "You can now use 'gemini' directly."
          '';
        };
      });
}
#+end_src

***** gemini-cli flake.lock

#+NAME: gemini-cli-flake.lock
#+begin_src nix
{
  "nodes": {
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1752480373,
        "narHash": "sha256-JHQbm+OcGp32wAsXTE/FLYGNpb+4GLi5oTvCxwSoBOA=",
        "owner": "NixOS",
        "repo": "Nixpkgs",
        "rev": "62e0f05ede1da0d54515d4ea8ce9c733f12d9f08",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "Nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
#+end_src

**** gemini-cli tangle
***** gemini-cli flake.nix

+ home dir

#+NAME: gemini-cli-flake.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/gemini-cli/flake.nix"
<<gemini-cli-flake.nix>>
#+END_SRC
  
+ current dir

#+NAME: gemini-cli-flake.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/gemini-cli/flake.nix"
<<gemini-cli-flake.nix>>
#+END_SRC

***** gemini-cli flake.lock

+ home dir

#+NAME: gemini-cli-flake.lock-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/gemini-cli/flake.lock"
<<gemini-cli-flake.lock>>
#+END_SRC
  
+ current dir

#+NAME: gemini-cli-flake.lock-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/gemini-cli/flake.lock"
<<gemini-cli-flake.lock>>
#+END_SRC

*** kokoro
**** kokoro config

#+NAME: kokoro
#+begin_src nix
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell rec {
  name = "kokoro";
  buildInputs = with pkgs; [
    python312
    stdenv.cc.cc.lib
    stdenv.cc
    cudaPackages.cudatoolkit
    linuxPackages.nvidia_x11 # Seems necessary for CUDA context
    zlib # Common dependency
    ];

  LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath buildInputs;
  CUDA_PATH = pkgs.cudaPackages.cudatoolkit;
  EXTRA_LDFLAGS = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

  shellHook = ''
    echo "Setting up environment for Kokoro with CUDA..."

    # Set the locale.
    export LC_ALL="en_US.UTF-8"
    export LANG="en_US.UTF-8"
    export PYTHONIOENCODING="utf-8"

    # Create and activate virtual environment
    if [ ! -d ".venv" ]; then
      echo "Creating Python virtual environment..."
      ${pkgs.python312}/bin/python3.12 -m venv .venv
    else
      echo "Re-activating existing Python virtual environment..."
    fi
    source .venv/bin/activate
    echo "Virtual environment activated."

    # Set CUDA variables
    export CUDA_VISIBLE_DEVICES=0
    export XDG_CACHE_HOME="$HOME/.cache"

    # pip upgrade
    pip install --upgrade pip

    # install torch torchaudio
    pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121

    # install kokoro
    pip install -q "kokoro>=0.9.4" soundfile

    echo "Kokoro setup complete."
  '';
}
#+end_src

**** kokoro tangle

+ home dir

#+NAME: kokoro-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/kokoro/shell.nix"
<<kokoro>>
#+END_SRC
  
+ current dir

#+NAME: kokoro-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/kokoro/shell.nix"
<<kokoro>>
#+END_SRC

*** index-tts
**** index-tts config
***** flake.nix

#+NAME: index-tts-flake.nix
#+begin_src nix
{
  description = "A development shell for OpenAI Whisper with CUDA support.";

  inputs = {
    # Pinning to the latest unstable NixOS release for better CUDA stability
    nixpkgs.url = "github:NixOS/Nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true; # Necessary for NVIDIA drivers and CUDA
          };
        };
      in
      {
        devShells.default = pkgs.mkShell rec {
          name = "index-tts";

          # Essential build inputs for CUDA and Python environment
          buildInputs = with pkgs; [
            ffmpeg-full
            python311
            stdenv.cc.cc.lib
            stdenv.cc
            cudaPackages.cudatoolkit # Using the general cudatoolkit from the stable channel
            linuxPackages.nvidia_x11 # Host NVIDIA X11 drivers
            zlib
          ];

          # Environment variables required for CUDA and library linking
          LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath buildInputs;
          CUDA_PATH = pkgs.cudaPackages.cudatoolkit;
          CUDA_HOME = pkgs.cudaPackages.cudatoolkit;
          EXTRA_LDFLAGS = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

          # Ensure CUDA binaries (like nvidia-smi) are in PATH for diagnostics
          PATH = pkgs.lib.makeBinPath [
            pkgs.cudaPackages.cudatoolkit
          ];

          # Shell hook to set up the Python virtual environment and install dependencies
          shellHook = ''
            echo "Setting up environment for indextts with CUDA..."

            export LC_ALL="en_US.UTF-8"
            export LANG="en_US.UTF-8"
            export PYTHONIOENCODING="utf-8"

            if [ ! -d ".venv" ]; then
              echo "Creating Python virtual environment..."
              ${pkgs.python311}/bin/python3.11 -m venv .venv
            else
              echo "Re-activating existing Python virtual environment..."
            fi
            source .venv/bin/activate
            echo "Virtual environment activated."

            export CUDA_VISIBLE_DEVICES=0
            export XDG_CACHE_HOME="$HOME/.cache"

            pip install --upgrade pip

            echo "Installing torch and torchaudio for CUDA 12.1..."
            pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121

            # install index-tts
            pip install -r ./index-tts/requirements.txt
            pip install -e ./index-tts/.

            echo "index-tts setup complete."
          '';
        };
      });
}
#+end_src

***** flake.lock

#+NAME: index-tts-flake.lock
#+begin_src nix
{
  "nodes": {
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1751271578,
        "narHash": "sha256-P/SQmKDu06x8yv7i0s8bvnnuJYkxVGBWLWHaU+tt4YY=",
        "owner": "NixOS",
        "repo": "Nixpkgs",
        "rev": "3016b4b15d13f3089db8a41ef937b13a9e33a8df",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "Nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
#+end_src

**** index-tts tangle
***** flake.nix

+ home dir

#+NAME: index-tts-flake.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/index-tts/flake.nix"
<<index-tts-flake.nix>>
#+END_SRC
  
+ current dir

#+NAME: index-tts-flake.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/index-tts/flake.nix"
<<index-tts-flake.nix>>
#+END_SRC

***** flake.lock

+ home dir

#+NAME: index-tts-flake.lock-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/index-tts/flake.lock"
<<index-tts-flake.lock>>
#+END_SRC
  
+ current dir

#+NAME: index-tts-flake.lock-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/index-tts/flake.lock"
<<index-tts-flake.lock>>
#+END_SRC

*** whisper
**** whisper config
***** whisper flake.nix

#+begin_src sh
nix develop
#+end_src

update

#+begin_src sh
nix flake update
nix develop
#+end_src

then commit lock file

#+NAME: whisper-flake.nix
#+begin_src nix
{
  description = "A development shell for OpenAI Whisper with CUDA support.";

  inputs = {
    # Pinning to the latest unstable NixOS release for better CUDA stability
    nixpkgs.url = "github:NixOS/Nixpkgs/nixos-unstable"; 
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true; # Necessary for NVIDIA drivers and CUDA
          };
        };
      in
      {
        devShells.default = pkgs.mkShell rec {
          name = "whisper-dev";

          # Essential build inputs for CUDA and Python environment
          buildInputs = with pkgs; [
            python312
            stdenv.cc.cc.lib
            stdenv.cc
            cudaPackages.cudatoolkit # Using the general cudatoolkit from the stable channel
            linuxPackages.nvidia_x11 # Host NVIDIA X11 drivers
            zlib
          ];

          # Environment variables required for CUDA and library linking
          LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath buildInputs;
          CUDA_PATH = pkgs.cudaPackages.cudatoolkit;
          CUDA_HOME = pkgs.cudaPackages.cudatoolkit;
          EXTRA_LDFLAGS = "-L${pkgs.linuxPackages.nvidia_x11}/lib";

          # Ensure CUDA binaries (like nvidia-smi) are in PATH for diagnostics
          PATH = pkgs.lib.makeBinPath [
            pkgs.cudaPackages.cudatoolkit
          ];

          # Shell hook to set up the Python virtual environment and install dependencies
          shellHook = ''
            echo "Setting up environment for Whisper with CUDA (NixOS 25.05 stable)..."

            export LC_ALL="en_US.UTF-8"
            export LANG="en_US.UTF-8"
            export PYTHONIOENCODING="utf-8"

            if [ ! -d ".venv" ]; then
              echo "Creating Python virtual environment..."
              ${pkgs.python312}/bin/python3.12 -m venv .venv
            else
              echo "Re-activating existing Python virtual environment..."
            fi
            source .venv/bin/activate
            echo "Virtual environment activated."

            export CUDA_VISIBLE_DEVICES=0
            export XDG_CACHE_HOME="$HOME/.cache"

            pip install --upgrade pip

            echo "Installing torch and torchaudio for CUDA 12.1..."
            pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121

            echo "Installing openai-whisper..."
            pip install -U openai-whisper

            echo "Whisper setup complete."
          '';
        };
      });
}
#+end_src

***** whisper flake.lock

#+NAME: whisper-flake.lock
#+begin_src nix
{
  "nodes": {
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1751271578,
        "narHash": "sha256-P/SQmKDu06x8yv7i0s8bvnnuJYkxVGBWLWHaU+tt4YY=",
        "owner": "NixOS",
        "repo": "Nixpkgs",
        "rev": "3016b4b15d13f3089db8a41ef937b13a9e33a8df",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "Nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
#+end_src

**** whisper tangle
***** whisper flake.nix

+ home dir

#+NAME: whisper-flake.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/whisper/flake.nix"
<<whisper-flake.nix>>
#+END_SRC
  
+ current dir

#+NAME: whisper-flake.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/whisper/flake.nix"
<<whisper-flake.nix>>
#+END_SRC

***** whisper flake.lock

+ home dir

#+NAME: whisper-flake.lock-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/whisper/flake.lock"
<<whisper-flake.lock>>
#+END_SRC
  
+ current dir

#+NAME: whisper-flake.lock-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/whisper/flake.lock"
<<whisper-flake.lock>>
#+END_SRC

*** whisperx
**** whisperx config
***** whisperx flake.nix

#+begin_src sh
nix develop
#+end_src

update

#+begin_src sh
nix flake update
nix develop
#+end_src

then commit lock file

#+NAME: whisperx-flake.nix
#+begin_src nix
{
  description = "A development shell for WhisperX with CUDA support (pip-based installation, targeting CUDA 12.x and cuDNN 8.x on NixOS 25.05).";

  inputs = {
    # Pinning to the latest NixOS unstable
    nixpkgs.url = "github:NixOS/Nixpkgs/nixos-unstable";
    flake-utils.url = "github:numtide/flake-utils";
  };

  outputs = { self, nixpkgs, flake-utils }:
    flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          config = {
            allowUnfree = true; # Necessary for NVIDIA drivers and CUDA
          };
        };
        # Resolve the cudnn_8_9 path at Nix evaluation time.
        # If attribute doesn't exist, getAttrFromPath returns null.
        cudnn89Path = pkgs.lib.getAttrFromPath [ "cudaPackages" "cudnn_8_9" "out" ] pkgs;
      in
      {
        devShells.default = pkgs.mkShell rec {
          name = "whisperx-dev";

          # Essential build inputs for CUDA and Python environment
          buildInputs = with pkgs; [
            python312 # Python interpreter for creating the venv
            stdenv.cc.cc.lib # C standard library
            stdenv.cc        # C compiler
            cudaPackages.cudatoolkit # Default CUDA toolkit from NixOS 25.05 (likely 12.x)
          ] ++ pkgs.lib.optionals (cudnn89Path != null) [ pkgs.cudaPackages.cudnn_8_9 ] # Conditionally include cudnn_8_9 if its path was resolved (not null)
          ++ [
            linuxPackages.nvidia_x11 # Host NVIDIA X11 drivers (for libcuda.so)
            zlib # Common dependency
          ];

          # Environment variables required for CUDA and library linking
          LD_LIBRARY_PATH = pkgs.lib.makeLibraryPath buildInputs;
          CUDA_PATH = pkgs.cudaPackages.cudatoolkit;
          CUDA_HOME = pkgs.cudaPackages.cudatoolkit;
          EXTRA_LDFLAGS = "-L${pkgs.linuxPackages.nvidia_x11}/lib";
          # Pass the resolved cuDNN 8.9 path to the shell. Convert null to empty string for shell.
          NIX_CUDNN_8_9_PATH = if cudnn89Path != null then toString cudnn89Path else "";

          # Ensure CUDA binaries (like nvidia-smi) are in PATH for diagnostics
          PATH = pkgs.lib.makeBinPath [
            pkgs.cudaPackages.cudatoolkit
          ];

          # Shell hook to set up the Python virtual environment and install dependencies
          shellHook = ''
            echo "Entering WhisperX development shell with CUDA support (NixOS 25.05 stable, PyTorch cu121/cu122, attempting cuDNN 8.9)..."
            echo "Note: PyTorch and WhisperX will be installed via pip within a virtual environment."

            # Set the locale for consistent encoding
            export LC_ALL="en_US.UTF-8"
            export LANG="en_US.UTF-8"
            export PYTHONIOENCODING="utf-8"

            # Create and activate Python virtual environment
            if [ ! -d ".venv" ]; then
              echo "Creating Python virtual environment..."
              ${pkgs.python312}/bin/python3.12 -m venv .venv
            else
              echo "Re-activating existing Python virtual environment..."
            fi
            source .venv/bin/activate
            echo "Virtual environment activated."

            # Set CUDA variables
            export CUDA_VISIBLE_DEVICES=0
            export XDG_CACHE_HOME="$HOME/.cache"

            # Upgrade pip
            pip install --upgrade pip

            # Install torch torchaudio for CUDA 12.1/12.2 (trying general cu12x)
            echo "Installing latest stable torch and torchaudio for CUDA 12.x..."
            pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu121
            # If cu121 still resolves to 12.6, we might try cu122 or no specific version
            # If problems persist, consider explicit torch versions that are known to work with cuDNN 8.x and CUDA 12.x
            # Example: pip install torch==2.1.2 torchaudio==2.1.2 --index-url https://download.pytorch.org/whl/cu121

            # Install whisperx
            echo "Installing whisperx..."
            pip install -U whisperx

            echo "WhisperX setup complete. You can now use 'whisperx' command."
          '';
        };
      });
}
#+end_src

***** whisperx flake.lock

#+NAME: whisperx-flake.lock
#+begin_src nix
{
  "nodes": {
    "flake-utils": {
      "inputs": {
        "systems": "systems"
      },
      "locked": {
        "lastModified": 1731533236,
        "narHash": "sha256-l0KFg5HjrsfsO/JpG+r7fRrqm12kzFHyUHqHCVpMMbI=",
        "owner": "numtide",
        "repo": "flake-utils",
        "rev": "11707dc2f618dd54ca8739b309ec4fc024de578b",
        "type": "github"
      },
      "original": {
        "owner": "numtide",
        "repo": "flake-utils",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1751271578,
        "narHash": "sha256-P/SQmKDu06x8yv7i0s8bvnnuJYkxVGBWLWHaU+tt4YY=",
        "owner": "NixOS",
        "repo": "Nixpkgs",
        "rev": "3016b4b15d13f3089db8a41ef937b13a9e33a8df",
        "type": "github"
      },
      "original": {
        "owner": "NixOS",
        "ref": "nixos-unstable",
        "repo": "Nixpkgs",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "flake-utils": "flake-utils",
        "nixpkgs": "nixpkgs"
      }
    },
    "systems": {
      "locked": {
        "lastModified": 1681028828,
        "narHash": "sha256-Vy1rq5AaRuLzOxct8nz4T6wlgyUR7zLU309k9mBC768=",
        "owner": "nix-systems",
        "repo": "default",
        "rev": "da67096a3b9bf56a91d16901293e51ba5b49a27e",
        "type": "github"
      },
      "original": {
        "owner": "nix-systems",
        "repo": "default",
        "type": "github"
      }
    }
  },
  "root": "root",
  "version": 7
}
#+end_src

***** process_whisperx_output.py

run whisperx

#+begin_src sh
whisperx input.mp4 --device cuda --model small --diarize --highlight_words True --output_format json,srt
#+end_src

play the video with the srt file and identify the speakers

run the process_whisperx_output.py script with the -j option and the path to the json file

#+begin_src sh
python process_whisperx_output.py -j /path-to-json/video.json \
--map "SPEAKER_00=Oliver" \
--map "SPEAKER_01=David" \
--map "SPEAKER_02=Mike"
#+end_src

#+NAME: process_whisperx_output.py
#+begin_src python
import json
import os
import argparse
import re # Import regex for clean filename extraction

def format_timestamp(seconds):
    """Formats time in seconds to HH:MM:SS,ms for SRT/VTT."""
    ms = int((seconds - int(seconds)) * 1000)
    s = int(seconds % 60)
    m = int((seconds // 60) % 60)
    h = int(seconds // 3600)
    return f"{h:02}:{m:02}:{s:02},{ms:03}"

def format_vtt_timestamp(seconds):
    """Formats time in seconds to HH:MM:SS.ms for VTT."""
    ms = int((seconds - int(seconds)) * 1000)
    s = int(seconds % 60)
    m = int((seconds // 60) % 60)
    h = int(seconds // 3600)
    return f"{h:02}:{m:02}:{s:02}.{ms:03}"


def rename_speakers_in_json(input_json_path, output_json_path, speaker_map):
    """
    Reads a WhisperX JSON output file, renames speaker labels, and saves
    the updated JSON to a new file.

    Args:
        input_json_path (str): Path to the original WhisperX JSON output file.
        output_json_path (str): Path where the new JSON with renamed speakers
                                will be saved.
        speaker_map (dict): A dictionary mapping original speaker IDs (e.g.,
                            "SPEAKER_00") to desired names (e.g., "David").
    Returns:
        bool: True if successful, False otherwise.
    """
    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input JSON file not found at '{input_json_path}'")
        return False
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{input_json_path}'. Is it valid JSON?")
        return False

    updated_segments = []
    for segment in data.get("segments", []):
        original_speaker_id = segment.get("speaker")
        
        # If a speaker ID exists and is in our map, replace it
        if original_speaker_id in speaker_map:
            segment["speaker"] = speaker_map[original_speaker_id]
        
        updated_segments.append(segment)

    data["segments"] = updated_segments

    try:
        os.makedirs(os.path.dirname(output_json_path), exist_ok=True)
        with open(output_json_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        print(f"Successfully renamed speakers and saved to '{output_json_path}'")
        return True
    except IOError as e:
        print(f"Error writing output file '{output_json_path}': {e}")
        return False


def convert_json_to_srt(input_json_path, output_srt_path):
    """
    Converts a JSON output (like from WhisperX, potentially with renamed speakers)
    into an SRT subtitle file.
    Returns:
        bool: True if successful, False otherwise.
    """
    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input JSON file not found at '{input_json_path}'")
        return False
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{input_json_path}'. Is it valid JSON?")
        return False

    os.makedirs(os.path.dirname(output_srt_path), exist_ok=True)
    with open(output_srt_path, 'w', encoding='utf-8') as f:
        for i, segment in enumerate(data["segments"]):
            start_time = segment["start"]
            end_time = segment["end"]
            text = segment["text"].strip()
            speaker = segment.get("speaker", None)

            start_srt = format_timestamp(start_time)
            end_srt = format_timestamp(end_time)

            f.write(f"{i + 1}\n")
            f.write(f"{start_srt} --> {end_srt}\n")
            if speaker:
                f.write(f"[{speaker}]: {text}\n")
            else:
                f.write(f"{text}\n")
            f.write("\n")
    print(f"Successfully converted JSON to SRT: '{output_srt_path}'")
    return True

def convert_json_to_vtt(input_json_path, output_vtt_path):
    """
    Converts a JSON output into a VTT subtitle file.
    Returns:
        bool: True if successful, False otherwise.
    """
    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input JSON file not found at '{input_json_path}'")
        return False
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{input_json_path}'. Is it valid JSON?")
        return False

    os.makedirs(os.path.dirname(output_vtt_path), exist_ok=True)
    with open(output_vtt_path, 'w', encoding='utf-8') as f:
        f.write("WEBVTT\n\n")
        for i, segment in enumerate(data["segments"]):
            start_time = segment["start"]
            end_time = segment["end"]
            text = segment["text"].strip()
            speaker = segment.get("speaker", None)

            start_vtt = format_vtt_timestamp(start_time)
            end_vtt = format_vtt_timestamp(end_time)

            f.write(f"{start_vtt} --> {end_vtt}\n")
            if speaker:
                f.write(f"<{speaker}> {text}\n") # VTT typically uses <speaker> format
            else:
                f.write(f"{text}\n")
            f.write("\n")
    print(f"Successfully converted JSON to VTT: '{output_vtt_path}'")
    return True


def convert_json_to_txt(input_json_path, output_txt_path):
    """
    Converts a JSON output (like from WhisperX, potentially with renamed speakers)
    into a plain text file with speaker labels.
    Returns:
        bool: True if successful, False otherwise.
    """
    try:
        with open(input_json_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
    except FileNotFoundError:
        print(f"Error: Input JSON file not found at '{input_json_path}'")
        return False
    except json.JSONDecodeError:
        print(f"Error: Could not decode JSON from '{input_json_path}'. Is it valid JSON?")
        return False

    os.makedirs(os.path.dirname(output_txt_path), exist_ok=True)
    with open(output_txt_path, 'w', encoding='utf-8') as f:
        for segment in data["segments"]:
            text = segment["text"].strip()
            speaker = segment.get("speaker", None) # Get speaker, or None if not present

            if speaker:
                f.write(f"[{speaker}]: {text}\n")
            else:
                f.write(f"{text}\n")
    print(f"Successfully converted JSON to TXT: '{output_txt_path}'")
    return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="""Rename speakers in WhisperX JSON output and convert to SRT, VTT, and TXT.
        
        By default, output files are created in subdirectories (e.g., 'processed_srt')
        within the same directory as the input JSON file.
        
        Usage examples:
        # Output files created in subdirectories relative to the input JSON:
        python process_whisperx_output.py -j ~/Video/subtitles/video.json --map "SPEAKER_00=Host"
        
        # Output files created in a completely different, specified directory:
        python process_whisperx_output.py -j ~/Video/subtitles/video.json -o ./my_final_subtitles/ --map "SPEAKER_00=Guest"
        """,
        formatter_class=argparse.RawTextHelpFormatter # Keeps newlines in description
    )
    parser.add_argument(
        "-j", "--json_file", type=str, required=True,
        help="Path to the input WhisperX JSON file (e.g., ./whisperx_output/input.json)."
    )
    parser.add_argument(
        "-o", "--output_dir", type=str, default=None, # <--- Changed default to None
        help="Directory where output files (JSON, SRT, VTT, TXT) will be saved. "
             "If not specified, defaults to the directory of the input JSON file."
    )
    parser.add_argument(
        "--map", action="append", nargs=1, type=str, metavar="OLD_ID=NEW_NAME",
        help="Map an old speaker ID (e.g., 'SPEAKER_00') to a new name (e.g., 'David'). "
             "Use multiple times for multiple mappings: --map 'SPEAKER_00=David' --map 'SPEAKER_01=Oliver'."
    )
    args = parser.parse_args()

    # --- Configuration ---
    input_json = args.json_file
    
    # Determine the base output directory
    if args.output_dir:
        output_base_dir = args.output_dir
    else:
        # Default to the directory of the input JSON file
        output_base_dir = os.path.dirname(os.path.abspath(input_json))

    # Extract base filename without extension
    base_filename = os.path.splitext(os.path.basename(input_json))[0]
    
    # Ensure base_filename is clean for output paths
    base_filename = re.sub(r'[^a-zA-Z0-9_-]', '-', base_filename) 
    base_filename = base_filename.strip('-')

    # Define output file paths based on the base filename and the determined output_base_dir
    output_renamed_json = os.path.join(output_base_dir, "processed_json", f"{base_filename}-processed.json")
    output_renamed_srt = os.path.join(output_base_dir, "processed_srt", f"{base_filename}.srt")
    output_renamed_vtt = os.path.join(output_base_dir, "processed_vtt", f"{base_filename}.vtt")
    output_renamed_txt = os.path.join(output_base_dir, "processed_txt", f"{base_filename}.txt")

    # Construct speaker_name_map from command line arguments
    speaker_name_map = {}
    if args.map:
        for mapping_list in args.map: 
            mapping = mapping_list[0]
            if '=' in mapping:
                old_id, new_name = mapping.split('=', 1)
                speaker_name_map[old_id.strip()] = new_name.strip()
            else:
                print(f"Warning: Invalid speaker mapping format '{mapping}'. Expected 'OLD_ID=NEW_NAME'. Skipping.")
    
    if not speaker_name_map:
        print("No speaker mappings provided via --map. Using default generic speaker labels.")


    # --- Renaming Process ---
    print(f"Processing input JSON: '{input_json}'")
    renaming_successful = rename_speakers_in_json(input_json, output_renamed_json, speaker_name_map)

    if renaming_successful:
        # --- Generate SRT with Renamed Speakers ---
        print(f"\nGenerating SRT: '{output_renamed_srt}'")
        convert_json_to_srt(output_renamed_json, output_renamed_srt)

        # --- Generate VTT with Renamed Speakers ---
        print(f"\nGenerating VTT: '{output_renamed_vtt}'")
        convert_json_to_vtt(output_renamed_json, output_renamed_vtt)

        # --- Generate TXT with Renamed Speakers ---
        print(f"\nGenerating TXT: '{output_renamed_txt}'")
        convert_json_to_txt(output_renamed_json, output_renamed_txt)
    else:
        print("\nSkipping SRT, VTT, and TXT generation due to an error in JSON renaming.")

#+end_src

**** whisperx tangle
***** whisperx flake.nix

+ home dir

#+NAME: whisperx-flake.nix-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/whisperx/flake.nix"
<<whisperx-flake.nix>>
#+END_SRC
  
+ current dir

#+NAME: whisperx-flake.nix-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/whisperx/flake.nix"
<<whisperx-flake.nix>>
#+END_SRC

***** whisperx flake.lock

+ home dir

#+NAME: whisperx-flake.lock-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/whisperx/flake.lock"
<<whisperx-flake.lock>>
#+END_SRC
  
+ current dir

#+NAME: whisperx-flake.lock-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/whisperx/flake.lock"
<<whisperx-flake.lock>>
#+END_SRC

***** process_whisperx_output.py

+ home dir

#+NAME: process_whisperx_output.py-home-dir
#+BEGIN_SRC nix :noweb yes :tangle "~/nix/whisperx/process_whisperx_output.py"
<<process_whisperx_output.py>>
#+END_SRC
  
+ current dir

#+NAME: process_whisperx_output.py-current-dir
#+BEGIN_SRC nix :noweb yes :tangle "nix/whisperx/process_whisperx_output.py"
<<process_whisperx_output.py>>
#+END_SRC

** emacs
*** emacs config
**** init.el

#+NAME: init.el
#+BEGIN_SRC emacs-lisp
;; ----------------------------------------------------------------------------------
;; emacs init.el - also using early-init.el
;; ----------------------------------------------------------------------------------

;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))


;; ----------------------------------------------------------------------------------
;; Bootstrap use-package
;; ----------------------------------------------------------------------------------

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(setq use-package-always-ensure t) ;; Automatically install packages if not present


;; ----------------------------------------------------------------------------------
;; melpa packages
;; ----------------------------------------------------------------------------------

(unless (assoc-default "melpa" package-archives)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t))
(unless (assoc-default "elpa" package-archives)
  (add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/") t))


;; package initialize (use-package will handle installation and requiring)
(package-initialize)


;; ----------------------------------------------------------------------------------
;; doom-theme : use-package
;; ----------------------------------------------------------------------------------

;; doom themes
(use-package doom-themes)


;; ----------------------------------------------------------------------------------
;; modus-vivendi-tinted : load-theme
;; ----------------------------------------------------------------------------------

(load-theme 'modus-vivendi-tinted t)


;; ----------------------------------------------------------------------------------
;; general settings : setq
;; ----------------------------------------------------------------------------------

;; Save all tempfiles in ~/.config/emacs/backups
(setq backup-directory-alist '(("." . "~/.config/emacs/backups")))

;; auto save list
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/auto-save-list/" t)))

;; history
(setq savehist-file "~/.config/emacs/savehist")
(savehist-mode 1)

(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))


;; dont backup files opened by sudo or doas
(setq backup-enable-predicate
      (lambda (name)
        (and (normal-backup-enable-predicate name)
             (not
              (let ((method (file-remote-p name 'method)))
                (when (stringp method)
                  (member method '("su" "sudo" "doas"))))))))


;; save
(save-place-mode 1)         ;; save cursor position
(desktop-save-mode 0)       ;; dont save the desktop session
(global-auto-revert-mode 1) ;; revert buffers when the underlying file has changed

;; scrolling
(pixel-scroll-precision-mode 1)


;; version control
(setq version-control t)
(setq vc-make-backup-files t)
(setq backup-by-copying t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
(setq create-lockfiles nil)
(setq undo-tree-auto-save-history nil)

;; pinentry
(defvar epa-pinentry-mode)
(setq epa-pinentry-mode 'loopback)

;; display time in mode line, hide load average
(setq display-time-format "%H:%M")
(setq display-time-default-load-average nil)
(display-time-mode 1)       ;; display time

;; change prompt from yes or no, to y or n
(setq use-short-answers t)

;; turn off blinking cursor
(setq blink-cursor-mode nil)

;; suppress large file prompt
(setq large-file-warning-threshold nil)

;; always follow symlinks
(setq vc-follow-symlinks t)

;; case insensitive search
(setq read-file-name-completion-ignore-case t)
(setq completion-ignore-case t)

;; M-n, M-p recall previous mini buffer commands
(setq history-length 25)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; Use spaces instead of tabs
(setq-default indent-tabs-mode nil)

;; revert dired and other buffers
(setq global-auto-revert-non-file-buffers t)

;; eww browser text width
(setq shr-width 80)

;; ediff
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
(setq ediff-split-window-function 'split-window-horizontally)

;; disable ring bell
(setq ring-bell-function 'ignore)

;; side windows
(setq switch-to-buffer-obey-display-actions t)

;; hippie expand
(setq save-abbrevs 'silently)
(setq hippie-expand-try-functions-list
      '(try-expand-all-abbrevs
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-dabbrev
        try-expand-dabbrev-from-kill
        try-expand-dabbrev-all-buffers
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))

;; emacs 28 - dictionary server
(setq dictionary-server "dict.org")


;; ----------------------------------------------------------------------------------
;; TAB bar mode
;; ----------------------------------------------------------------------------------

(setq tab-bar-show 1)                     ;; hide bar if <= 1 tabs open
(setq tab-bar-close-button-show nil)      ;; hide close tab button
(setq tab-bar-new-button-show nil)        ;; hide new tab button
(setq tab-bar-new-tab-choice "*scratch*") ;; default tab scratch
(setq tab-bar-close-last-tab-choice 'tab-bar-mode-disable) 
(setq tab-bar-close-tab-select 'recent)
(setq tab-bar-new-tab-to 'right)
(setq tab-bar-tab-hints nil)
(setq tab-bar-separator " ")
(setq tab-bar-auto-width-max '((100) 20))
(setq tab-bar-auto-width t)

;; Customize the tab bar format to add the global mode line string
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator tab-bar-format-align-right tab-bar-format-global))

;; menubar in tab bar
(add-to-list 'tab-bar-format #'tab-bar-format-menu-bar)

;; Turn on tab bar mode after startup
(tab-bar-mode 1)

;; tab bar menu bar button
(setq tab-bar-menu-bar-button "👿")


;; ----------------------------------------------------------------------------------
;; buffer list
;; ----------------------------------------------------------------------------------

;; display Buffer List in same window
(add-to-list 'display-buffer-alist
   '("^*Buffer List*" display-buffer-same-window))


;; mandatory, as the dictionary misbehaves!
(add-to-list 'display-buffer-alist
   '("^\\*Dictionary\\*" display-buffer-in-side-window
     (side . right)
     (window-width . 0.50)))


;; ----------------------------------------------------------------------------------
;; functions
;; ----------------------------------------------------------------------------------

;; clear the kill ring
(defun clear-kill-ring ()
  "Clear the results on the kill ring."
  (interactive)
  (setq kill-ring nil))

;; reload init.el
(defun my-reload-init ()
  "reload init.el"
  (interactive)
  (load-file "~/.config/emacs/init.el"))


;; ----------------------------------------------------------------------------------
;; keymap-global-set
;; ----------------------------------------------------------------------------------

;; org-capture
(keymap-global-set "C-c c" 'org-capture)

;; press M-/ and invoke hippie-expand
(keymap-global-set "M-/" 'hippie-expand)

;; window-toggle-side-windows
(keymap-global-set "C-x x w" 'window-toggle-side-windows)

;; open dired side window
(keymap-global-set "C-x x s" 'my/window-dired-vc-root-left)

;; complete-symbol
(keymap-global-set "C-." 'complete-symbol)


;; ----------------------------------------------------------------------------------
;; keymap-set
;; ----------------------------------------------------------------------------------

(keymap-set global-map "C-c h" 'iedit-mode)
(keymap-set global-map "C-c l" 'org-store-link)
(keymap-set global-map "C-c a" 'org-agenda)

;; mpv seek to position at point
(keymap-set global-map "C-x ," 'my/mpv-seek-to-position-at-point)

;; mpv dired embark
(with-eval-after-load 'embark
  (define-key embark-file-map "l" #'mpv-play-marked-files))



;; ----------------------------------------------------------------------------------
;; fonts
;; ----------------------------------------------------------------------------------

(defvar efs/default-font-size 180)
(defvar efs/default-variable-font-size 180)


;; ----------------------------------------------------------------------------------
;; set-face-attribute
;; ----------------------------------------------------------------------------------

;; Set the default pitch face
(set-face-attribute 'default nil :font "Fira Code" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Iosevka" :height efs/default-variable-font-size :weight 'regular)

;; tab bar background
(set-face-attribute 'tab-bar nil
                    :foreground "#93a1a1")

;; active tab
(set-face-attribute 'tab-bar-tab nil
                    :foreground "#51AFEF")

;; inactive tab
(set-face-attribute 'tab-bar-tab-inactive nil
                    :foreground "grey50")

;; ----------------------------------------------------------------------------------
;; doom-modeline
;; ----------------------------------------------------------------------------------

(use-package doom-modeline
  :init
  (setq doom-modeline-icon t
        doom-modeline-buffer-file-name-style 'truncate-except-project
        doom-modeline-time-icon nil
        doom-modeline-buffer-encoding nil
        doom-modeline-major-mode-icon t
        doom-modeline-battery t
        doom-modeline-vcs-icon t
        doom-modeline-vcs-bar-width 4
        doom-modeline-vcs-max-length 15)
  (display-battery-mode t)
  :config
  (doom-modeline-mode 1)
  ;; The modeline definition is now moved to doom-modeline-now-playing's :config
  )


;; ----------------------------------------------------------------------------------
;; doom modeline now playing
;; ----------------------------------------------------------------------------------

(use-package doom-modeline-now-playing
  :after doom-modeline
  :init
  (setq doom-modeline-now-playing t
        doom-modeline-now-playing-max-length 35
        doom-modeline-now-playing-interval 1
        doom-modeline-now-playing-playerctl-format "[{{duration(position)}}/{{duration(mpris:length)}}] {{title}}")
  :config
  ;; Define the 'now-playing' segment first
  (doom-modeline-def-segment now-playing
    "Display current media playback status."
    (when (and doom-modeline-now-playing
               doom-modeline-now-playing-status)
      (let ((player (oref doom-modeline-now-playing-status player))
            (status (oref doom-modeline-now-playing-status status))
            (text   (oref doom-modeline-now-playing-status text)))
        (when (and player status text
                   (not (string= player "No players found")))
          (concat
           (propertize (if (equal status "playing")
                          (doom-modeline-icon 'faicon "nf-fa-play" "" ">"
                                            :v-adjust -0)
                        (doom-modeline-icon 'faicon "nf-fa-pause" "" "||"
                                          :v-adjust -0))
                      'mouse-face 'mode-line-highlight
                      'help-echo "mouse-1: Toggle player status"
                      'local-map (let ((map (make-sparse-keymap)))
                                 (define-key map [mode-line mouse-1]
                                           'doom-modeline-now-playing-toggle-status)
                                 map))
           (doom-modeline-spc)
           (propertize
            (truncate-string-to-width text doom-modeline-now-playing-max-length nil nil "...")
            'face 'doom-modeline-now-playing-text))))))

  ;; Now, define the full modeline, including 'now-playing'
  (doom-modeline-def-modeline 'main
    '(bar matches buffer-info remote-host buffer-position selection-info now-playing)
    '(misc-info minor-modes input-method buffer-encoding major-mode process vcs check battery time))

  ;; Optional: Force modeline update to see changes immediately
  (force-mode-line-update)
  (message "Doom Modeline segments redefined successfully.")

  ;; doom-modeline-now-playing-timer - keep at bottom
  (doom-modeline-now-playing-timer))


;; ----------------------------------------------------------------------------------
;; evil
;; ----------------------------------------------------------------------------------

(use-package evil
  :init
  (setq evil-want-keybinding nil
        evil-want-C-i-jump nil)
  :config
  (evil-mode 1))


;; ----------------------------------------------------------------------------------
;; evil-collection
;; ----------------------------------------------------------------------------------

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init)
  ;; dired use h and l
  (evil-collection-define-key 'normal 'dired-mode-map
    "e" 'dired-find-file
    "h" 'dired-up-directory
    "l" 'dired-find-file-mpv))


;; ----------------------------------------------------------------------------------
;; general packages : use-package
;; ----------------------------------------------------------------------------------

(use-package evil-leader)
(use-package git-auto-commit-mode)
(use-package iedit)
(use-package nerd-icons)
(use-package nix-mode)
(use-package s)
(use-package shrink-path)
(use-package undo-tree)
(use-package wgrep)
(use-package yaml-mode)


;;----------------------------------------------------------------------------------
;; ob-sync
;;----------------------------------------------------------------------------------

(use-package ob-async
  :config
  ;; ob-async sentinel fix
  (defun no-hide-overlays (orig-fun &rest args)
    (setq org-babel-hide-result-overlays nil))
  (advice-add 'ob-async-org-babel-execute-src-block :before #'no-hide-overlays))


;;----------------------------------------------------------------------------------
;; which-key
;;----------------------------------------------------------------------------------

(use-package which-key
  :config
  (which-key-mode))


;;----------------------------------------------------------------------------------
;; undo-tree
;;----------------------------------------------------------------------------------

(use-package undo-tree
  :config
  (global-undo-tree-mode 1)
  (setq undo-tree-visualizer-timestamps t
        undo-tree-visualizer-diff t))


;; ----------------------------------------------------------------------------------
;; Vertico
;; ----------------------------------------------------------------------------------

(use-package vertico
  :init
  (setq vertico-cycle t)
  :config
  (vertico-mode 1)
  ;; Add vertico keybindings here if they were from vertico-directory and are still desired.
  ;; C-j and C-k are usually default vertico navigation.
  ;; M-h for vertico-directory-up can be implemented as a custom function if needed.
  (with-eval-after-load 'evil
    (define-key vertico-map (kbd "C-j") 'vertico-next)
    (define-key vertico-map (kbd "C-k") 'vertico-previous)
    ;; Example for M-h if needed, requires defining a custom function or finding a vertico equivalent:
    ;; (define-key vertico-map (kbd "M-h") 'my-vertico-directory-up)
    ))


;; ----------------------------------------------------------------------------------
;; Marginalia
;; ----------------------------------------------------------------------------------

(use-package marginalia
  :init
  (setq marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
  :config
  (marginalia-mode 1))


;; ----------------------------------------------------------------------------------
;; Consult
;; ----------------------------------------------------------------------------------

(use-package consult
  :bind
  ("C-s" . consult-line)
  ("C-x b" . consult-buffer) ;; remap switch-to-buffer
  ("M-y" . consult-yank-pop) ;; Moved consult-yank-pop binding here
  :init
  (setq completion-in-region-function #'consult-completion-in-region
        enable-recursive-minibuffers t) ;; It lets you use a new minibuffer when you're in the minibuffer
  :config
  (define-key minibuffer-local-map (kbd "C-r") 'consult-history))


;; ----------------------------------------------------------------------------------
;; Orderless
;; ----------------------------------------------------------------------------------

(use-package orderless
  :init
  (setq completion-styles '(orderless basic)
        completion-category-overrides '((file (styles . (partial-completion))))))


;; ----------------------------------------------------------------------------------
;; Embark
;; ----------------------------------------------------------------------------------

(use-package embark
  :bind
  ([remap describe-bindings] . embark-bindings)
  ("C-," . embark-act)
  :init
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (use-package embark-consult
    :after embark consult
    :hook (embark-collect-mode . consult-preview-at-point-mode))

  (defun embark-which-key-indicator ()
    "An embark indicator that displays keymaps using which-key.
  The which-key help message will show the type and value of the
  current target followed by an ellipsis if there are further
  targets."
    (lambda (&optional keymap targets prefix)
      (if (null keymap)
          (which-key--hide-popup-ignore-command)
        (which-key--show-keymap
         (if (eq (plist-get (car targets) :type) 'embark-become)
             "Become"
           (format "Act on %s '%s'%s"
                   (plist-get (car targets) :type)
                   (embark--truncate-target (plist-get (car targets) :target))
                   (if (cdr targets) "…" "")))
         (if prefix
             (pcase (lookup-key keymap prefix 'accept-default)
               ((and (pred keymapp) km) km)
               (_ (key-binding prefix 'accept-default)))
           keymap)
         nil nil t (lambda (binding)
                     (not (string-suffix-p "-argument" (cdr binding))))))))

  (setq embark-indicators
        '(embark-which-key-indicator
          embark-highlight-indicator
          embark-isearch-highlight-indicator))

  (defun embark-hide-which-key-indicator (fn &rest args)
    "Hide the which-key indicator immediately when using the completing-read prompter."
    (which-key--hide-popup-ignore-command)
    (let ((embark-indicators
           (remq #'embark-which-key-indicator embark-indicators)))
      (apply fn args)))

  (advice-add #'embark-completing-read-prompter
              :around #'embark-hide-which-key-indicator))


;; ----------------------------------------------------------------------------------
;; dired (Built-in Emacs functionality)
;; ----------------------------------------------------------------------------------

;; dired hide long listing by default -- Define this function early and globally
(defun my-dired-mode-setup ()
  "Show less information in dired buffers."
  (dired-hide-details-mode 1))

;; Dired setq variables that are safe to set early
(setq dired-kill-when-opening-new-dired-buffer t
      dired-use-ls-dired t
      dired-listing-switches "-ahlv"
      dired-omit-mode t
      dired-recursive-copies 'always
      dired-recursive-deletes 'always
      dired-free-space nil
      dired-dwim-target t)

;; Configuration for built-in 'dired' and 'dired-x'
(with-eval-after-load 'dired
  (require 'dired-x) ;; Load dired-x functionalities

  ;; Set dired-omit-files after dired-x has loaded it
  (setq dired-omit-files (concat dired-omit-files "\\|^\\..+$"))
  (setq dired-guess-shell-alist-user '(("\\.pdf$" "zathura")))

  ;; dired hide async output buffer
  (add-to-list 'display-buffer-alist (cons "\\*Async Shell Command\\*.*" (cons #'display-buffer-no-window nil)))

  ;; Dired hooks (moved here to ensure my-dired-mode-setup is defined)
  (add-hook 'dired-mode-hook 'my-dired-mode-setup)
  (add-hook 'dired-mode-hook (lambda () (dired-omit-mode 1))))


;; ------------------------------------------------------------------------------------------------
;; side-windows
;; ------------------------------------------------------------------------------------------------

;; dired-find-file-other-window 
;; bound to <S-return>, g O, <normal-state> <S-return>, <normal-state> g O

;; dired side window
(defun my/window-dired-vc-root-left ()
  (interactive)
  (let ((dir (if (eq (vc-root-dir) nil)
                 (dired-noselect default-directory)
               (dired-noselect (vc-root-dir)))))
    (display-buffer-in-side-window
     dir `((side . left)
           (slot . 0)
           (window-width . 0.20)
           (window-parameters . ((no-delete-other-windows . t)
                                 (mode-line-format . (""))))))))


;; ----------------------------------------------------------------------------------
;; fd-dired (External Package)
;; ----------------------------------------------------------------------------------

(use-package fd-dired
  :init
  (setq fd-dired-display-in-current-window nil))

;; switch to buffer results automatically
(defcustom fd-dired-display-in-current-window nil
  "Whether display result"
  :type 'boolean
  :safe #'booleanp
  :group 'fd-dired)


;; ----------------------------------------------------------------------------------
;; async and dired-async (dired-async is part of the async package)
;; ----------------------------------------------------------------------------------

(use-package async
  :config
  ;; Enable dired-async-mode after the async package is loaded
  (dired-async-mode 1))



;; ----------------------------------------------------------------------------------
;; rip-grep
;; ----------------------------------------------------------------------------------

(use-package rg
  :config
  ;; rip-grep automatically switch to results buffer
  ;; https://github.com/dajva/rg.el/issues/142
  (advice-add 'rg-run :after
              #'(lambda (_pattern _files _dir &optional _literal _confirm _flags) (pop-to-buffer (rg-buffer-name)))))


;; ----------------------------------------------------------------------------------
;; tramp
;; ----------------------------------------------------------------------------------

(use-package tramp
  :init
  (setq tramp-default-method "ssh"
        tramp-allow-unsafe-temporary-files t)
  :config
  (tramp-set-completion-function "ssh"
                                 '((tramp-parse-sconfig "/etc/ssh_config")
                                   (tramp-parse-sconfig "~/.ssh/config")))
  ;; set tramp shell to bash to avoid zsh problems
  (setenv "SHELL" "/bin/sh")
  (add-to-list 'tramp-backup-directory-alist
               (cons tramp-file-name-regexp nil))
  (add-to-list 'backup-directory-alist (cons tramp-file-name-regexp nil)))


;; ----------------------------------------------------------------------------------
;; org mode
;; ----------------------------------------------------------------------------------

(use-package org
  :defer t
  :init
  (setq org-agenda-files '("~/git/personal/org/")
        org-confirm-babel-evaluate nil
        org-src-fontify-natively t
        org-src-tab-acts-natively t
        org-hide-emphasis-markers t
        org-tags-column 0
        org-src-preserve-indentation t
        org-src-window-setup 'current-window
        org-image-actual-width nil
        org-adapt-indentation nil
        org-export-async-debug t
        org-outline-path-complete-in-steps nil
        org-refile-use-outline-path t
        org-pandoc-options-for-latex-pdf '((latex-engine . "xelatex"))
        org-export-backends '(org md html latex icalendar odt ascii)
        org-todo-keywords
        '((sequence "TODO(t@/!)" "IN-PROGRESS(p/!)" "WAITING(w@/!)" "|" "DONE(d@)"))
        org-log-done t
        org-use-fast-todo-selection t
        org-log-into-drawer t
        org-file-apps
        (quote
         ((auto-mode . emacs)
          ("\\.mm\\'" . default)
          ("\\.x?html?\\'" . default)
          ("\\.mkv\\'" . "mpv %s")
          ("\\.mp4\\'" . "mpv %s")
          ("\\.mov\\'" . "mpv %s")
          ("\\.pdf\\'" . default)))
        browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "firefox")
  :config
  (require 'org-tempo)
  (require 'org-protocol)
  (require 'org-capture)
  (require 'org-faces)

  ;; org-timer covert seconds and milliseconds to hours, minutes, seconds, milliseconds
  (defun my/org-timer-secs-to-hms (s)
    "Convert integer S into hh:mm:ss.m
  If the integer is negative, the string will start with \"-\"."
    (let (sign m h)
      (setq x (number-to-string s)
            seconds (car (split-string x "[.]"))
            milliseconds (cadr (split-string x "[.]"))
            sec (string-to-number seconds)
            ms (string-to-number milliseconds))
      (setq sign (if (< sec 0) "-" "")
            sec (abs sec)
            m (/ sec 60) sec (- sec (* 60 m))
            h (/ m 60) m (- m (* 60 h)))
      (format "%s%02d:%02d:%02d.%02d" sign h m sec ms)))

  ;; org-timer covert hours, minutes, seconds, milliseconds to seconds, milliseconds
  (defun my/org-timer-hms-to-secs (hms)
    "Convert h:mm:ss string to an integer time.
  If the string starts with a minus sign, the integer will be negative."
    (if (not (string-match
              "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)\\([.]?[0-9]\\{0,3\\}\\)"
              hms))
        0
      (let* ((h (string-to-number (match-string 1 hms)))
             (m (string-to-number (match-string 2 hms)))
             (s (string-to-number (match-string 3 hms)))
             (ms (string-to-number (match-string 4 hms)))
             (sign (equal (substring (match-string 1 hms) 0 1) "-")))
        (setq h (abs h))
        (* (if sign -1 1) (+ s (+ ms (* 60 (+ m (* 60 h)))))))))

  ;; resize org headings
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Iosevka" :weight 'medium :height (cdr face)))

  (setq org-capture-templates
        '(("w" "web site" entry
           (file+olp "~/git/personal/bookmarks/bookmarks.org" "sites")
           "** [[%c][%^{link-description}]]"
           :empty-lines-after 1)
          ("v" "video url" entry
           (file+olp "~/git/personal/bookmarks/video.org" "links")
           "** [[video:%c][%^{link-description}]]"
           :empty-lines-after 1)))

  ;; refile
  (setq org-refile-targets '((nil :maxlevel . 2)
                             (org-agenda-files :maxlevel . 2)))

  (custom-set-faces
   '(org-link ((t (:inherit link :underline nil)))))

  (defadvice org-capture
      (after make-full-window-frame activate)
    "Advise capture to be the only window when used as a popup"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-other-windows)))

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "emacs-capture" (frame-parameter nil 'name))
        (delete-frame)))

  ;; org-babel shell script
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)))

  ;; yank-media--registered-handlers org mode
  (setq yank-media--registered-handlers '(("image/.*" . #'org-mode--image-yank-handler)))

  ;; org mode image yank handler
  (yank-media-handler "image/.*" #'org-mode--image-yank-handler)

  ;; org-mode insert image as file link from the clipboard
  (defun org-mode--image-yank-handler (type image)
    (let ((file (read-file-name (format "Save %s image to: " type))))
      (when (file-directory-p file) (user-error "%s is a directory"))
      (when (and (file-exists-p file) (not (yes-or-no-p (format "%s exists; overwrite?" file)))) (user-error "%s exists"))
      (with-temp-buffer (set-buffer-multibyte nil) (insert image) (write-region (point-min) (point-max) file))
      (insert (format "[[file:%s]]\n" (file-relative-name file))))))


;; ----------------------------------------------------------------------------------
;; org tree slide
;; ----------------------------------------------------------------------------------

(use-package org-tree-slide
  :init
  (setq org-tree-slide-header nil
        org-tree-slide-activate-message "Presentation started"
        org-tree-slide-deactivate-message "Presentation finished"
        org-tree-slide-slide-in-effect t
        org-tree-slide-breakcrumbs " // "
        org-tree-slide-heading-emphasis nil
        org-tree-slide-slide-in-blank-lines 2
        org-tree-slide-indicator nil)
  :hook (org-tree-slide-play . my/presentation-setup)
  (org-tree-slide-stop . my/presentation-end)
  :config
  ;; presentation start
  (defun my/presentation-setup ()
    (setq-local mode-line-format nil)
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                      (header-line (:height 4.0) variable-pitch)
                                      (org-document-title (:height 1.75) org-document-title)
                                      (org-code (:height 1.55) org-code)
                                      (org-verbatim (:height 1.55) org-verbatim)
                                      (org-block (:height 1.25) org-block)
                                      (org-block-begin-line (:height 0.7) org-block))))

  ;; presentation end
  (defun my/presentation-end ()
    (doom-modeline-set-modeline 'main)
    (setq-local face-remapping-alist '((default fixed-pitch default)))
    (setq-local face-remapping-alist '((default variable-pitch default))))

  ;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  ;; make #+ lines invisible during presentation
  (defvar my-hide-org-meta-line-p nil)
  (defun my-hide-org-meta-line ()
    (interactive)
    (setq my-hide-org-meta-line-p t)
    (set-face-attribute 'org-meta-line nil :foreground (face-attribute 'default :background)))
  (defun my-show-org-meta-line ()
    (interactive)
    (setq my-hide-org-meta-line-p nil)
    (set-face-attribute 'org-meta-line nil :foreground nil))
  (defun my-toggle-org-meta-line ()
    (interactive)
    (if my-hide-org-meta-line-p (my-show-org-meta-line) (my-hide-org-meta-line))))


;; ----------------------------------------------------------------------------------
;; mpv.el 
;; ----------------------------------------------------------------------------------

(use-package mpv
  :init
  ;; mpv-default-options play fullscreen on second display
  (setq mpv-default-options '("--fs" "--fs-screen-name=DP-3"))


  :config
  ;; create a video: link type that opens a url using mpv-play-remote-video
  (org-link-set-parameters "video"
                           :follow #'mpv-play-remote-video
                           :store #'org-video-store-link)
  
  
  ;; org video store link
  (defun org-video-store-link ()
    "Store a link to a video url."
        (org-link-store-props
         :type "video"
         :link link
         :description description))
  
  
  ;; mpv-play-remote-video
  (defun mpv-play-remote-video (url &rest args)
    "Start an mpv process playing the video stream at URL."
    (interactive)
    (unless (mpv--url-p url)
      (user-error "Invalid argument: `%s' (must be a valid URL)" url))
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start url)
        ;; mpv running append file to playlist
      (mpv--playlist-append url)))
  
  
  ;; mpv-play-clipboard - play url from clipboard
  (defun mpv-play-clipboard ()
    "Start an mpv process playing the video stream at URL."
    (interactive)
    (let ((url (current-kill 0 t)))
    (unless (mpv--url-p url)
      (user-error "Invalid argument: `%s' (must be a valid URL)" url))
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start url)
        ;; mpv running append file to playlist
      (mpv--playlist-append url))))
  
  
  ;; create a mpv: link type that opens a file using mpv-play
  (defun org-mpv-complete-link (&optional arg)
    (replace-regexp-in-string
     "file:" "mpv:"
     (org-link-complete-file arg)
     t t))
  (org-link-set-parameters "mpv"
    :follow #'mpv-play :complete #'org-mpv-complete-link)
  
  ;; M-RET will insert a new item with the timestamp of the current playback position
  (defun my:mpv/org-metareturn-insert-playback-position ()
    (when-let ((item-beg (org-in-item-p)))
      (when (and (not org-timer-start-time)
                 (mpv-live-p)
                 (save-excursion
                   (goto-char item-beg)
                   (and (not (org-invisible-p)) (org-at-item-timer-p))))
        (my/mpv-insert-playback-position t))))
  (add-hook 'org-metareturn-hook #'my:mpv/org-metareturn-insert-playback-position)


  ;; video and audio mime types
  (defvar supported-mime-types
    '("video/quicktime"
      "video/x-matroska"
      "video/mp4"
      "video/webm"
      "video/x-m4v"
      "video/x-msvideo"
      "audio/x-wav"
      "audio/mpeg"
      "audio/x-hx-aac-adts"
      "audio/mp4"
      "audio/flac"
      "audio/ogg"))
  
  ;; subr-x
  (load "subr-x")
  
  ;; get files mime type
  (defun get-mimetype (filepath)
    (string-trim
     (shell-command-to-string (concat "file -b --mime-type "
                                      (shell-quote-argument filepath)))))
  
  ;; dired-find-file-mpv
  (defun dired-find-file-mpv ()
    "Start an mpv process playing the file at PATH append subsequent files to the playlist"
    (interactive)
    (let ((file (dired-get-file-for-visit)))
      (if (member (get-mimetype file) supported-mime-types)
          (mpv-play-dired file)
        (dired-find-file))))


  ;; mpv play dired marked files
  (defun mpv-play-marked-files ()
    "Play marked files with mpv"
    (interactive)
    (mapc 'mpv-play-dired (dired-get-marked-files nil nil nil t)))


  ;; frame step forward
    (defun mpv-frame-step ()
      "Step one frame forward."
      (interactive)
      (mpv--enqueue '("frame-step") #'ignore))
  
  
  ;; frame step backward
    (defun mpv-frame-back-step ()
      "Step one frame backward."
      (interactive)
      (mpv--enqueue '("frame-back-step") #'ignore))
  
  
  ;; mpv take a screenshot
    (defun mpv-screenshot ()
      "Take a screenshot"
      (interactive)
      (mpv--enqueue '("screenshot") #'ignore))
  
  
  ;; mpv show osd
    (defun mpv-osd ()
      "Show the osd"
      (interactive)
      (mpv--enqueue '("set_property" "osd-level" "3") #'ignore))
  
  
  ;; add a newline in the current document
  (defun end-of-line-and-indented-new-line ()
    (interactive)
    (end-of-line)
    (newline-and-indent))


  ;; mpv insert playback position
  (defun my/mpv-insert-playback-position (&optional arg)
    "Insert the current playback position at point.

  When called with a non-nil ARG, insert a timer list item like `org-timer-item'."
    (interactive "P")
    (let ((time (mpv-get-playback-position)))
      (funcall
       (if arg #'mpv--position-insert-as-org-item #'insert)
       (my/org-timer-secs-to-hms (float time)))))
  
  
  ;; seek to position
  (defun my/mpv-seek-to-position-at-point ()
    "Jump to playback position as inserted by `mpv-insert-playback-position'.

  This can be used with the `org-open-at-point-functions' hook."
    (interactive)
    (save-excursion
      (skip-chars-backward ":[:digit:]" (point-at-bol))
      (when (looking-at "[0-9]+:[0-9]\\{2\\}:[0-9]\\{2\\}\\([.]?[0-9]\\{0,3\\}\\)"))
        (let ((secs (my/org-timer-hms-to-secs (match-string 0))))
          (when (>= secs 0)
            (mpv-seek secs)))))

  
  ;; mpv-play-dired
  (defun mpv-play-dired (path)
  "Start an mpv process playing the file at PATH append subsequent files to the playlist"
    (if (not mpv--process)
        ;; mpv isnt running play file
        (mpv-start (expand-file-name path))
        ;; mpv running append file to playlist
      (mpv--playlist-append (expand-file-name path))))


  ) ;; This is the final closing parenthesis for the entire (use-package mpv ...) block



;; ----------------------------------------------------------------------------------
;; pinch - play urls with mpd
;; ----------------------------------------------------------------------------------

(defun pinch-clipboard ()
  "Send a url from the clipboard to mpd with pinch"
  (interactive)
  (let ((url (current-kill 0 t)))
  (start-process "pinch" nil "pinch" "-i" url)))


;; ----------------------------------------------------------------------------------
;; emacs desktop notification center
;; ----------------------------------------------------------------------------------

;; start ednc-mode
(use-package ednc
  :init
  (ednc-mode 1)
  :config
  (defun show-notification-in-buffer (old new)
    (let ((name (format "Notification %d" (ednc-notification-id (or old new)))))
      (with-current-buffer (get-buffer-create name)
        (if new (let ((inhibit-read-only t))
                  (if old (erase-buffer) (ednc-view-mode))
                  (insert (ednc-format-notification new t))
                  (pop-to-buffer (current-buffer)))
          (kill-buffer)))))
  
  
  ;; notifications hook
  (add-hook 'ednc-notification-presentation-functions
            #'show-notification-in-buffer)
  
  ;; open notifications in side window
  (add-to-list 'display-buffer-alist
     '("^Notification *" display-buffer-in-side-window
       (side . right)
       (window-width . 0.50)))
  
  ;; ednc evil - normal mode
  (defun noevil ()
    (evil-define-key 'normal ednc-view-mode-map "d" 'ednc-dismiss-notification)
    (evil-define-key 'normal ednc-view-mode-map (kbd "RET") 'ednc-invoke-action)
  )
  (add-hook 'ednc-view-mode-hook 'noevil))


;; ----------------------------------------------------------------------------------
;; hydra
;; ----------------------------------------------------------------------------------

(use-package hydra
  :after mpv 
  :config
  ;; Define hydra-mpv
  (defhydra hydra-mpv (:hint nil)
    "
    ^Seek^                  ^Actions^               ^General^                       ^Playlists^
    ^^^^^^^^-----------------------------------------------------------------------------------------------------------
    _h_: seek back -5       _,_: back frame         _i_: insert playback position   _n_: next item in playlist
    _j_: seek back -60      _._: forward frame      _m_: insert a newline           _p_: previous item in playlist
    _k_: seek forward 60    _SPC_: pause            _s_: take a screenshot          _e_: jump to playlist entry
    _l_: seek forward 5     _q_: quit mpv           _o_: show the osd               _r_: remove playlist entry
    ^
    "
    ("h" mpv-seek-backward "-5")
    ("j" mpv-seek-backward "-60")
    ("k" mpv-seek-forward "60")
    ("l" mpv-seek-forward "5")
    ("," mpv-frame-back-step)
    ("." mpv-frame-step)
    ("SPC" mpv-pause)
    ("q" mpv-kill)
    ("i" my/mpv-insert-playback-position)
    ("m" end-of-line-and-indented-new-line)
    ("s" mpv-screenshot)
    ("o" mpv-osd)
    ("n" mpv-playlist-next)
    ("p" mpv-playlist-prev)
    ("e" mpv-jump-to-playlist-entry)
    ("r" mpv-remove-playlist-entry))

  ;; Define hydra-emacs
  (defhydra hydra-emacs (:hint nil :exit t)
    "
    ^Actions^
    ^^^^^^^^--------------
    _m_: mpv clipboard
    _p_: pinch url
    ^
    "
    ("m" mpv-play-clipboard)
    ("p" pinch-clipboard))

  ;; Define hydra-nested
  (defvar hydra-stack nil)

  (defhydra hydra-nested (:exit t)
    ("e" hydra-emacs/body "emacs" :column "hydra")
    ("m" hydra-mpv/body "mpv" :column "hydra")
    ("q" nil "quit"))

  ;; Set global keybinding
  (global-set-key (kbd "C-a") 'hydra-nested/body))


;; ----------------------------------------------------------------------------------
;; mutt
;; ----------------------------------------------------------------------------------

(add-to-list 'auto-mode-alist '("/mutt" . mail-mode))

;; ----------------------------------------------------------------------------------
;; add-hook
;; ----------------------------------------------------------------------------------

;; Make shebang (#!) file executable when saved
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; visual line mode
(add-hook 'text-mode-hook 'visual-line-mode)

;; h1 line mode
(add-hook 'prog-mode-hook #'hl-line-mode)
(add-hook 'text-mode-hook #'hl-line-mode)


;; ----------------------------------------------------------------------------------
;; wayland clipboard
;; ----------------------------------------------------------------------------------

;; credit: yorickvP on Github
(setq wl-copy-process nil)
(defun wl-copy (text)
  (setq wl-copy-process (make-process :name "wl-copy"
                                      :buffer nil
                                      :command '("wl-copy" "-f" "-n")
                                      :connection-type 'pipe
                                      :noquery t))
  (process-send-string wl-copy-process text)
  (process-send-eof wl-copy-process))
(defun wl-paste ()
  (if (and wl-copy-process (process-live-p wl-copy-process))
      nil ; should return nil if we're the current paste owner
      (shell-command-to-string "wl-paste -n")))
(setq interprogram-cut-function 'wl-copy)
(setq interprogram-paste-function 'wl-paste)


;; ----------------------------------------------------------------------------------
;; mpc
;; ----------------------------------------------------------------------------------

;; mpd host
(setq mpc-host "/home/djwilcox/.config/mpd/socket")


;; ----------------------------------------------------------------------------------
;; google-translate
;; ----------------------------------------------------------------------------------

(use-package google-translate
  :config
  (setq google-translate-default-source-language "auto"
        google-translate-default-target-language "en"
        google-translate-display-buffer-action
        '(pop-to-buffer-same-window)))


;; ----------------------------------------------------------------------------------
;; magit
;; ----------------------------------------------------------------------------------


(use-package magit
  :init
  (setenv "SSH_AUTH_SOCK" "/run/user/1000/gcr/ssh"))


;; ----------------------------------------------------------------------------------
;; auth-source
;; ----------------------------------------------------------------------------------

(require 'auth-source)
(add-to-list 'auth-sources (expand-file-name ".authinfo" user-emacs-directory))


;; ----------------------------------------------------------------------------------
;; gptel
;; ----------------------------------------------------------------------------------

(use-package gptel
  :init
  (setq gptel-default-mode 'org-mode
        gptel-post-response-functions #'gptel-end-of-response
        gptel-expert-commands t)
  :config
  (setq gptel-model 'gemini-2.5-flash
        gptel-backend (gptel-make-gemini "Gemini"
                                         :key (gptel-api-key-from-auth-source "generativelanguage.googleapis.com")
                                         :stream t))

  ;; display the Gemini buffer in same window
  (add-to-list 'display-buffer-alist
               '("^*Gemini*" display-buffer-same-window))

  ;; gptel set org source blocks to use sh and not bash
  (defun my/gptel-fix-src-header (beg end)
    (save-excursion
      (goto-char beg)
      (while (re-search-forward "^#\\+begin_src bash" end t)
        (replace-match "#+begin_src sh"))))

  (add-hook 'gptel-post-response-functions #'my/gptel-fix-src-header))



;; ----------------------------------------------------------------------------------
;; exec-path add local bin directory
;; ----------------------------------------------------------------------------------

(add-to-list 'exec-path "~/bin")
(add-to-list 'exec-path "~/.nix-profile/bin")


;; ----------------------------------------------------------------------------------
;; garbage collection
;; ----------------------------------------------------------------------------------

;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-link ((t (:inherit link :underline nil)))))
#+END_SRC

**** early-init.el

#+NAME: early-init.el
#+begin_src emacs-lisp
;;; early-init.el -*- lexical-binding: t; -*-

;;; Garbage collection
;; Increase the GC threshold for faster startup
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;;; UI configuration
;; Remove some unneeded UI elements (the user can turn back on anything they wish)
(setq inhibit-startup-message t)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)

;; general settings
(setq initial-scratch-message nil)

;; Don’t compact font caches during GC.
(setq inhibit-compacting-font-caches t)

;; start the initial frame maximized
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; start every frame maximized
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; no title bar
(add-to-list 'default-frame-alist '(undecorated . t))

;;Tell emacs where is your personal elisp lib dir
(add-to-list 'load-path "~/.config/emacs/lisp/")

;; Make the initial buffer load faster by setting its mode to fundamental-mode
(customize-set-variable 'initial-major-mode 'fundamental-mode)
#+end_src

**** bookmarks config

#+NAME: emacs-bookmarks
#+BEGIN_SRC emacs-lisp
;;;; Emacs Bookmark Format Version 1;;;; -*- coding: utf-8-emacs; mode: lisp-data -*-
;;; This format is meant to be slightly human-readable;
;;; nevertheless, you probably don't want to edit it.
;;; -*- End Of Bookmark File Format Version Stamp -*-
(("changelog"
 (filename . "~/git/changelog/README.org")
 (front-context-string . "#+STARTUP: show2")
 (rear-context-string)
 (position . 1)
 (last-modified 26720 13229 20205 770000))
("desktop"
 (filename . "~/Desktop/")
 (front-context-string . "changelog.org\n  ")
 (rear-context-string . "50 Apr 16 17:55 ")
 (position . 76)
 (last-modified 26623 61673 55530 368000))
("dotfiles"
 (filename . "~/git/nixos/nixos-dotfiles/nixos-dotfiles.org")
 (front-context-string . "#TITLE: nixos do")
 (rear-context-string)
 (position . 1)
 (last-modified 26623 61644 642588 138000))
("video"
 (filename . "~/git/personal/bookmarks/video.org")
 (front-context-string . "* links\n** [[vid")
 (rear-context-string . "ARTUP: overview\n")
 (position . 42)
 (last-modified 26024 3044 81012 2000))
("bookmarks"
 (filename . "~/git/personal/bookmarks/bookmarks.org")
 (front-context-string . "#+STARTUP: overv")
 (rear-context-string)
 (position . 1)
 (last-modified 25703 35089 410375 479000))
("feeds"
 (filename . "~/git/personal/feeds/feeds.org")
 (front-context-string . "* elfeed :elfeed")
 (rear-context-string . "TARTUP: content\n")
 (position . 20)
 (last-modified 25692 54791 894815 365000))
("org-refile-last-stored"
 (filename . "~/git/personal/org/web.org")
 (front-context-string . "** [[https://its")
 (rear-context-string . "lview\" program.\n")
 (position . 173198))
("root"
 (filename . "/")
 (front-context-string . "bin -> usr/bin\n ")
 (rear-context-string . " 7 Oct 30 23:23 ")
 (position . 197))
("home"
 (filename . "~/")
 (front-context-string . "..\n  drwxr-xr-x ")
 (rear-context-string . " 3 Oct 30 23:26 ")
 (position . 178))
("cerberus"
 (filename . "~/git/cerberus/")
 (front-context-string . "7zip\n  drwxr-xr-")
 (rear-context-string . "96 Jan  4  2016 ")
 (position . 249))
)
#+END_SRC

**** lisp
***** prot-common

#+NAME: prot-common
#+BEGIN_SRC emacs-lisp
;;; prot-common.el --- Common functions for my dotemacs -*- lexical-binding: t -*-

;; Copyright (C) 2020-2023  Protesilaos Stavrou

;; Author: Protesilaos Stavrou <info@protesilaos.com>
;; URL: https://protesilaos.com/emacs/dotemacs
;; Version: 0.1.0
;; Package-Requires: ((emacs "30.1"))

;; This file is NOT part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or (at
;; your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <https://www.gnu.org/licenses/>.

;;; Commentary:
;;
;; Common functions for my Emacs: <https://protesilaos.com/emacs/dotemacs/>.
;;
;; Remember that every piece of Elisp that I write is for my own
;; educational and recreational purposes.  I am not a programmer and I
;; do not recommend that you copy any of this if you are not certain of
;; what it does.

;;; Code:

(eval-when-compile
  (require 'subr-x))

(defgroup prot-common ()
  "Auxiliary functions for my dotemacs."
  :group 'editing)

;;;###autoload
(defun prot-common-number-even-p (n)
  "Test if N is an even number."
  (if (numberp n)
      (= (% n 2) 0)
    (error "%s is not a number" n)))

;;;###autoload
(defun prot-common-number-integer-p (n)
  "Test if N is an integer."
  (if (integerp n)
      n
    (error "%s is not an integer" n)))

;;;###autoload
(defun prot-common-number-integer-positive-p (n)
  "Test if N is a positive integer."
  (if (prot-common-number-integer-p n)
      (> n 0)
    (error "%s is not a positive integer" n)))

;; Thanks to Gabriel for providing a cleaner version of
;; `prot-common-number-negative': <https://github.com/gabriel376>.
;;;###autoload
(defun prot-common-number-negative (n)
  "Make N negative."
  (if (and (numberp n) (> n 0))
      (* -1 n)
    (error "%s is not a valid positive number" n)))

;;;###autoload
(defun prot-common-reverse-percentage (number percent change-p)
  "Determine the original value of NUMBER given PERCENT.

CHANGE-P should specify the increase or decrease.  For simplicity,
nil means decrease while non-nil stands for an increase.

NUMBER must satisfy `numberp', while PERCENT must be `natnump'."
  (unless (numberp number)
    (user-error "NUMBER must satisfy numberp"))
  (unless (natnump percent)
    (user-error "PERCENT must satisfy natnump"))
  (let* ((pc (/ (float percent) 100))
         (pc-change (if change-p (+ 1 pc) pc))
         (n (if change-p pc-change (float (- 1 pc-change)))))
    ;; FIXME 2021-12-21: If float, round to 4 decimal points.
    (/ number n)))

;;;###autoload
(defun prot-common-percentage-change (n-original n-final)
  "Find percentage change between N-ORIGINAL and N-FINAL numbers.

When the percentage is not an integer, it is rounded to 4
floating points: 16.666666666666664 => 16.667."
  (unless (numberp n-original)
    (user-error "N-ORIGINAL must satisfy numberp"))
  (unless (numberp n-final)
    (user-error "N-FINAL must satisfy numberp"))
  (let* ((difference (float (abs (- n-original n-final))))
         (n (* (/ difference n-original) 100))
         (round (floor n)))
    ;; FIXME 2021-12-21: Any way to avoid the `string-to-number'?
    (if (> n round) (string-to-number (format "%0.4f" n)) round)))

;; REVIEW 2023-04-07 07:43 +0300: I just wrote the conversions from
;; seconds.  Hopefully they are correct, but I need to double check.
(defun prot-common-seconds-to-minutes (seconds)
  "Convert a number representing SECONDS to MM:SS notation."
  (let ((minutes (/ seconds 60))
        (seconds (% seconds 60)))
    (format "%.2d:%.2d" minutes seconds)))

(defun prot-common-seconds-to-hours (seconds)
  "Convert a number representing SECONDS to HH:MM:SS notation."
  (let* ((hours (/ seconds 3600))
         (minutes (/ (% seconds 3600) 60))
         (seconds (% seconds 60)))
    (format "%.2d:%.2d:%.2d" hours minutes seconds)))

;;;###autoload
(defun prot-common-seconds-to-minutes-or-hours (seconds)
  "Convert SECONDS to either minutes or hours, depending on the value."
  (if (> seconds 3599)
      (prot-common-seconds-to-hours seconds)
    (prot-common-seconds-to-minutes seconds)))

;;;###autoload
(defun prot-common-rotate-list-of-symbol (symbol)
  "Rotate list value of SYMBOL by moving its car to the end.
Return the first element before performing the rotation.

This means that if `sample-list' has an initial value of `(one
two three)', this function will first return `one' and update the
value of `sample-list' to `(two three one)'.  Subsequent calls
will continue rotating accordingly."
  (unless (symbolp symbol)
    (user-error "%s is not a symbol" symbol))
  (when-let* ((value (symbol-value symbol))
              (list (and (listp value) value))
              (first (car list)))
    (set symbol (append (cdr list) (list first)))
    first))

;;;###autoload
(defun prot-common-empty-buffer-p ()
  "Test whether the buffer is empty."
  (or (= (point-min) (point-max))
      (save-excursion
        (goto-char (point-min))
        (while (and (looking-at "^\\([a-zA-Z]+: ?\\)?$")
                    (zerop (forward-line 1))))
        (eobp))))

;;;###autoload
(defun prot-common-minor-modes-active ()
  "Return list of active minor modes for the current buffer."
  (let ((active-modes))
    (mapc (lambda (m)
            (when (and (boundp m) (symbol-value m))
              (push m active-modes)))
          minor-mode-list)
    active-modes))

;;;###autoload
(defun prot-common-truncate-lines-silently ()
  "Toggle line truncation without printing messages."
  (let ((inhibit-message t))
    (toggle-truncate-lines t)))

;;;###autoload
(defun prot-common-disable-hl-line ()
  "Disable Hl-Line-Mode (for hooks)."
  (hl-line-mode -1))

;;;###autoload
(defun prot-common-window-bounds ()
  "Determine start and end points in the window."
  (list (window-start) (window-end)))

;;;###autoload
(defun prot-common-page-p ()
  "Return non-nil if there is a `page-delimiter' in the buffer."
  (or (save-excursion (re-search-forward page-delimiter nil t))
      (save-excursion (re-search-backward page-delimiter nil t))))

;;;###autoload
(defun prot-common-read-data (file)
  "Read Elisp data from FILE."
  (with-temp-buffer
    (insert-file-contents file)
    (read (current-buffer))))

;; Thanks to Omar Antolín Camarena for providing this snippet!
;;;###autoload
(defun prot-common-completion-table (category candidates)
  "Pass appropriate metadata CATEGORY to completion CANDIDATES.

This is intended for bespoke functions that need to pass
completion metadata that can then be parsed by other
tools (e.g. `embark')."
  (lambda (string pred action)
    (if (eq action 'metadata)
        `(metadata (category . ,category))
      (complete-with-action action candidates string pred))))

;; Thanks to Igor Lima for the `prot-common-crm-exclude-selected-p':
;; <https://github.com/0x462e41>.
;; This is used as a filter predicate in the relevant prompts.
(defvar crm-separator)

;;;###autoload
(defun prot-common-crm-exclude-selected-p (input)
  "Filter out INPUT from `completing-read-multiple'.
Hide non-destructively the selected entries from the completion
table, thus avoiding the risk of inputting the same match twice.

To be used as the PREDICATE of `completing-read-multiple'."
  (if-let* ((pos (string-match-p crm-separator input))
            (rev-input (reverse input))
            (element (reverse
                      (substring rev-input 0
                                 (string-match-p crm-separator rev-input))))
            (flag t))
      (progn
        (while pos
          (if (string= (substring input 0 pos) element)
              (setq pos nil)
            (setq input (substring input (1+ pos))
                  pos (string-match-p crm-separator input)
                  flag (when pos t))))
        (not flag))
    t))

;; The `prot-common-line-regexp-p' and `prot-common--line-regexp-alist'
;; are contributed by Gabriel: <https://github.com/gabriel376>.  They
;; provide a more elegant approach to using a macro, as shown further
;; below.
(defvar prot-common--line-regexp-alist
  '((empty . "[\s\t]*$")
    (indent . "^[\s\t]+")
    (non-empty . "^.+$")
    (list . "^\\([\s\t#*+]+\\|[0-9]+[^\s]?[).]+\\)")
    (heading . "^[=-]+"))
  "Alist of regexp types used by `prot-common-line-regexp-p'.")

(defun prot-common-line-regexp-p (type &optional n)
  "Test for TYPE on line.
TYPE is the car of a cons cell in
`prot-common--line-regexp-alist'.  It matches a regular
expression.

With optional N, search in the Nth line from point."
  (save-excursion
    (goto-char (line-beginning-position))
    (and (not (bobp))
         (or (beginning-of-line n) t)
         (save-match-data
           (looking-at
            (alist-get type prot-common--line-regexp-alist))))))

;; The `prot-common-shell-command-with-exit-code-and-output' function is
;; courtesy of Harold Carr, who also sent a patch that improved
;; `prot-eww-download-html' (from the `prot-eww.el' library).
;;
;; More about Harold: <http://haroldcarr.com/about/>.
(defun prot-common-shell-command-with-exit-code-and-output (command &rest args)
  "Run COMMAND with ARGS.
Return the exit code and output in a list."
  (with-temp-buffer
    (list (apply 'call-process command nil (current-buffer) nil args)
          (buffer-string))))

(defvar prot-common-url-regexp
  (concat
   "~?\\<\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]*\\)"
   "[.@]"
   "\\([-a-zA-Z0-9+&@#/%?=~_|!:,.;]+\\)\\>/?")
  "Regular expression to match (most?) URLs or email addresses.")

(autoload 'auth-source-search "auth-source")

;;;###autoload
(defun prot-common-auth-get-field (host prop)
  "Find PROP in `auth-sources' for HOST entry."
  (when-let ((source (auth-source-search :host host)))
    (if (eq prop :secret)
        (funcall (plist-get (car source) prop))
      (plist-get (flatten-list source) prop))))

;;;###autoload
(defun prot-common-parse-file-as-list (file)
  "Return the contents of FILE as a list of strings.
Strings are split at newline characters and are then trimmed for
negative space.

Use this function to provide a list of candidates for
completion (per `completing-read')."
  (split-string
   (with-temp-buffer
     (insert-file-contents file)
     (buffer-substring-no-properties (point-min) (point-max)))
   "\n" :omit-nulls "[\s\f\t\n\r\v]+"))

(provide 'prot-common)
;;; prot-common.el ends here

#+end_src

*** emacs tangle
**** init.el

+ home dir

#+NAME: emacs-init.el-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/init.el"
<<init.el>>
#+END_SRC

+ current dir

#+NAME: emacs-init.el-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/init.el"
<<init.el>>
#+END_SRC

**** early-init.el

+ home dir

#+NAME: emacs-early-init.el-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/early-init.el"
<<early-init.el>>
#+END_SRC

+ current dir

#+NAME: emacs-early-init.el-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/early-init.el"
<<early-init.el>>
#+END_SRC

**** bookmark tangle

+ home dir

#+NAME: emacs-bookmarks-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/bookmarks"
<<emacs-bookmarks>>
#+END_SRC

+ current dir

#+NAME: emacs-bookmarks-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/bookmarks"
<<emacs-bookmarks>>
#+END_SRC

**** lisp
***** prot-common

+ home dir

#+NAME: prot-common-home-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle "~/.config/emacs/lisp/prot-common.el"
<<prot-common>>
#+END_SRC

+ current dir

#+NAME: prot-common-current-dir
#+BEGIN_SRC emacs-lisp :noweb yes :tangle ".config/emacs/lisp/prot-common.el"
<<prot-common>>
#+END_SRC

** alacritty
*** alacritty config

#+NAME: alacritty
#+BEGIN_SRC toml
[colors.bright]
black = "#000000"
blue = "#79a8ff"
cyan = "#4ae2f0"
green = "#70b900"
magenta = "#f78fe7"
red = "#ff6b55"
white = "#ffffff"
yellow = "#fec43f"

[colors.normal]
black = "#000000"
blue = "#2fafff"
cyan = "#00d3d0"
green = "#44bc44"
magenta = "#feacd0"
red = "#ff5f59"
white = "#989898"
yellow = "#d0bc00"

[colors.primary]
background = "#0D0E1C"
foreground = "#989898"

[env]
TERM = "xterm-256color"

[font]
size = 16.0

[font.bold]
family = "Fira Code"
style = "Bold"

[font.bold_italic]
family = "Fira Code"
style = "Bold Italic"

[font.italic]
family = "Fira Code"
style = "Italic"

[font.normal]
family = "Fira Code"
style = "Regular"

[window]
decorations = "none"
decorations_theme_variant = "Dark"
startup_mode = "Maximized"

[window.class]
general = "Alacritty"
instance = "Alacritty"

[window.padding]
x = 4
y = 4

[mouse]
hide_when_typing = false
#+END_SRC

*** alacritty tangle

+ home dir

#+NAME: alacritty-home-dir
#+BEGIN_SRC toml :noweb yes :tangle "~/.config/alacritty/alacritty.toml"
<<alacritty>>
#+END_SRC

+ current dir

#+NAME: alacritty-current-dir
#+BEGIN_SRC toml :noweb yes :tangle ".config/alacritty/alacritty.toml"
<<alacritty>>
#+END_SRC

** zsh
*** zsh config
**** zshrc

#+NAME: zshrc
#+BEGIN_SRC conf
# ~/.zshrc

# ssh zsh fix
[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ ' && return

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000

# variables for PS3 prompt
newline=$'\n'
yesmaster='Yes Master ? '

# source git-prompt.sh
source ~/.nix-profile/share/git/contrib/completion/git-prompt.sh

# export git status options
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true
export GIT_PS1_SHOWUPSTREAM="auto"
export GIT_PS1_SHOWCOLORHINTS=true

# PS3 prompt function
function zle-line-init zle-keymap-select {
    PS1="[%n@%M %~]$(__git_ps1 "(%s) ")${newline}${yesmaster}"
    zle reset-prompt
}

# run PS3 prompt function
zle -N zle-line-init
zle -N zle-keymap-select

# set terminal window title to program name
case $TERM in
  (*xterm* | xterm-256color)
    function precmd {
      print -Pn "\e]0;%(1j,%j job%(2j|s|); ,)%~\a"
    }
    function preexec {
      printf "\033]0;%s\a" "$1"
    }
  ;;
esac

# Fix bugs when switching modes
bindkey -v # vi mode
bindkey "^?" backward-delete-char
bindkey "^u" backward-kill-line
bindkey "^a" beginning-of-line
bindkey "^e" end-of-line
bindkey "^k" kill-line

# Use modern completion system
autoload -Uz compinit
compinit

# Set/unset  shell options
setopt notify globdots pushdtohome cdablevars autolist
setopt recexact longlistjobs
setopt autoresume histignoredups pushdsilent noclobber
setopt autopushd pushdminus extendedglob rcquotes mailwarning
setopt histignorealldups sharehistory
#setopt auto_cd
cdpath=($HOME)
unsetopt bgnice autoparamslash

# Completion Styles

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/3 )) numeric )'
    
# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

#eval "$(dircolors -b)"
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro' '.hidden'

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'

# kill - red, green, blue
zstyle ':completion:*:*:kill:*' list-colors '=(#b) #([0-9]#)*( *[a-z])*=22=31=34'

# list optiones colour, white + cyan
zstyle ':completion:*:options' list-colors '=(#b) #(-[a-zA-Z0-9,]#)*(-- *)=36=37'

# zsh autocompletion for sudo and doas
#zstyle ":completion:*:(sudo|su|doas):*" command-path /usr/local/bin /usr/sbin /home/djwilcox/bin

# rehash commands
zstyle ':completion:*' rehash true

# highlighting
#source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
ZSH_HIGHLIGHT_STYLES[suffix-alias]=fg=cyan,underline
ZSH_HIGHLIGHT_STYLES[precommand]=fg=cyan,underline
ZSH_HIGHLIGHT_STYLES[arg0]=fg=cyan
ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern)
ZSH_HIGHLIGHT_PATTERNS=('rm -rf *' 'fg=white,bold,bg=red')
#+END_SRC

**** zshenv

#+NAME: zshenv
#+begin_src conf
# ~/.zshenv

# Path
typeset -U PATH path
path=("$HOME/bin" "${HOME}/.nix-profile/bin" "$path[@]")
export PATH

# xdg directories
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"

# set emacsclient as editor
export ALTERNATE_EDITOR=""
export EDITOR="emacsclient -r -a emacs"
export VISUAL="emacsclient -r -c -a emacs"

# nix os xdg directories
export XDG_DATA_DIRS="$HOME/.nix-profile/share:$XDG_DATA_DIRS"

# nix-path
export NIX_PATH=$HOME/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels${NIX_PATH:+:$NIX_PATH}

# nix dont manage shell
if [ -f "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh" ];
    then . "$HOME/.nix-profile/etc/profile.d/hm-session-vars.sh";
fi
#+end_src

*** zsh tangle
**** zshrc tangle

+ home dir

#+NAME: zshrc-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.zshrc"
<<zshrc>>
#+END_SRC

+ current dir

#+NAME: zshrc-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".zshrc"
<<zshrc>>
#+END_SRC

**** zshenv tangle

+ home dir

#+NAME: zshenv-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.zshenv"
<<zshenv>>
#+END_SRC

+ current dir

#+NAME: zshenv-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".zshenv"
<<zshenv>>
#+END_SRC

** tmux
*** tmux config

#+NAME: tmux
#+BEGIN_SRC conf
# .tmux.conf

# vi mode
#set-option -g default-shell "/usr/local/bin/zsh"
#set-option -g default-command "/usr/local/bin/zsh"
#set -g default-command "${SHELL}"
set-window-option -g mode-keys vi

# Some tweaks to the status line
#set -g status-right "%H:%M" # date and time
set -g status-right "" # date and time
set -g status-right-style fg=color245

# If running inside tmux ($TMUX is set), then change the status line to red
%if #{TMUX}
set -g status-bg red
%endif

# Enable RGB colour if running in xterm(1)
set-option -sa terminal-overrides ",xterm*:Tc"

# Change the default $TERM to screen
set -g default-terminal "xterm-256color"

# No bells at all
set -g bell-action none

# close panes after command has finished
set -g remain-on-exit off

# Change the prefix key to C-a
set -g prefix C-a
unbind C-b
bind C-a send-prefix

# Turn the mouse on, but without copy mode dragging
set -g mouse on

# multiple places
bind F set -w window-size

# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g pane-base-index 1

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

# default statusbar colors
set -g status-style bg=default,fg=yellow #yellow

# default window title colors
set -g window-status-style fg=brightblue,bg=default

# active window title colors
set -g window-status-current-style fg=black,bg=blue

# pane border
set -g pane-border-style fg=black #base02
set -g pane-active-border-style fg=black #base01

# message text
set -g message-style bg=black,fg=brightred #orange

# pane number display
set-option -g display-panes-active-colour blue #blue
set-option -g display-panes-colour brightred #orange

# clock
set-window-option -g clock-mode-colour green #green

# vim key bindings
setw -g mode-keys vi
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# copy and paste
set-window-option -g automatic-rename on

# toggle statusbar
bind-key s set -g status

# copying selection vim style
bind-key Escape copy-mode			# enter copy mode; default [
bind-key p paste-buffer				# paste; (default hotkey: ] )
bind-key P choose-buffer 			# tmux clipboard history
bind-key + delete-buffer \; display-message "Deleted current Tmux Clipboard History"

# Note: rectangle-toggle (aka Visual Block Mode) > hit v then C-v to trigger it
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T choice-mode-vi h send-keys -X tree-collapse
bind-key -T choice-mode-vi l send-keys -X tree-expand
bind-key -T choice-mode-vi H send-keys -X tree-collapse-all
bind-key -T choice-mode-vi L send-keys -X tree-expand-all
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "wl-copy && wl-paste -n | wl-copy -p"
bind-key p run "wl-paste -n | tmux load-buffer - ; tmux paste-buffer"

# urlview as context and url view
bind-key u capture-pane \; save-buffer /tmp/tmux-buffer \; \
new-window -n "urlview" '$SHELL -c "urlview < /tmp/tmux-buffer"'

# tmux auto rename pane 
set-option -g status-interval 1
set-option -g allow-rename on
set-option -g automatic-rename on
set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},zsh},#{b:pane_title},#{pane_current_command}}"

# tmux title program name
set-option -g set-titles on
set-option -g set-titles-string "#W"
#+END_SRC

*** tmux tangle

+ home dir

#+NAME: tmux-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/tmux/tmux.conf"
<<tmux>>
#+END_SRC

+ current dir

#+NAME: tmux-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/tmux/tmux.conf"
<<tmux>>
#+END_SRC

** mpv
*** mpv config
**** input.conf

#+NAME: input.conf
#+BEGIN_SRC conf
# vim keybindings
l seek  5
h seek -5
k seek  60
j seek -60

# subtitles
J cycle sub 
K cycle sub down

# Audio filters:
F1 show-text "F2: loudnorm | F3: dynaudnorm | F4: low Bass | F5: low Treble" 2000

# loudnorm:
F2 af toggle lavfi=[loudnorm=I=-16:TP=-3:LRA=4]

# dynaudnorm:
F3 af toggle lavfi=[dynaudnorm=g=5:f=250:r=0.9:p=0.5]

# lowered bass:
F4  af toggle "superequalizer=6b=2:7b=2:8b=2:9b=2:10b=2:11b=2:12b=2:13b=2:14b=2:15b=2:16b=2:17b=2:18b=2"

# lowered treble:
F5  af toggle "superequalizer=1b=2:2b=2:3b=2:4b=2:5b=2:6b=2:7b=2:8b=2:9b=2:10b=2:11b=2:12b=2"
#+END_SRC

**** mpv.conf

#+NAME: mpv.conf
#+BEGIN_SRC conf
# mpv.conf

# list profiles with: mpv --profile=help

# load hwdec profile automatically
profile=hwdec 

# hardware acceleration profile
[hwdec]
profile-desc="hardware acceleration, no cache, yt-dlp 1080 or less"
vo=gpu
hwdec=vaapi

# hide: GNOME's wayland compositor lacks support for the idle inhibit protocol. 
#msg-level=ffmpeg=fatal,vo/gpu/wayland=no
msg-level=ffmpeg=fatal

# cache no for internet streams
cache=no

# yt-dlp best format 1080 or less
ytdl-format="bestvideo[height<=?1080]+bestaudio/best"

# show milliseconds in the on screen display
osd-fractions

# youtube subs - J to switch to subs
sub-auto=fuzzy
ytdl-raw-options=sub-lang="en",write-sub=,write-auto-sub=
sub-font='NotoColorEmoji'

# screenshot timecode
screenshot-template="%F-[%P]v%#01n"


# cache profile: mpv --profile=cache
[cache]
profile-desc="hardware acceleration, cache, yt-dlp 1080 or less"
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=auto


# youtube conditional auto profile match any youtube url
[youtube]
profile-desc="youtube hardware acceleration, cache"
profile-cond=path:find('youtu%.?be') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=no
# fullscreen 2nd display
fs
fs-screen-name=DP-3


# archive.org conditional auto profile match any archive.org url
[archive]
profile-desc="archive hardware acceleration, cache"
profile-cond=path:find('archive.org') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=auto
# fullscreen 2nd display
fs
fs-screen-name=DP-3


# bbc iplayer conditional auto profile match any bbc iplayer url
[iplayer]
profile-desc="iplayer hardware acceleration, cache"
profile-cond=path:find('bbc.co.uk/iplayer') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=no
# fullscreen 2nd display
fs
fs-screen-name=DP-3


# bbc iplayer conditional auto profile match any bbc iplayer url
[bbc]
profile-desc="bbc hardware acceleration, cache"
profile-cond=path:find('bbc:pips:service') ~= nil
# include hwdec profile 
profile=hwdec
# override hwdec profile cache setting
cache=no
# fullscreen 2nd display
fs
fs-screen-name=DP-3
#+END_SRC

*** mpv tangle
**** input.conf tangle

+ home dir

#+NAME: input.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpv/input.conf"
<<input.conf>>
#+END_SRC

+ current dir

#+NAME: input.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpv/input.conf"
<<input.conf>>
#+END_SRC

**** mpv.conf tangle

+ home dir

#+NAME: mpv.conf-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/mpv/mpv.conf"
<<mpv.conf>>
#+END_SRC

+ current dir

#+NAME: mpv.conf-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/mpv/mpv.conf"
<<mpv.conf>>
#+END_SRC

** yt-dlp
*** yt-dlp config

#+NAME: yt-dlp
#+BEGIN_SRC conf
# download 1080p video in mp4 format
#-f 'bestvideo[height<=1080][vcodec!=?vp9]+bestaudio[acodec!=?opus]'

# external downloader aria2
#--downloader aria2c --downloader-args aria2c:'-c -j 3 -x 3 -s 3 -k 1M'

# native downloader for dash and m3u8
--downloader 'dash,m3u8:native'

# restrict filenames
--restrict-filenames

# merge output format mkv
--merge-output-format mkv

# ouput template
-o '%(title)s-[%(id)s]-%(upload_date>%Y-%m-%d)s.%(ext)s'
#+END_SRC

*** yt-dlp tangle

+ home dir

#+NAME: yt-dlp-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/yt-dlp/config"
<<yt-dlp>>
#+END_SRC

+ current dir

#+NAME: yt-dlp-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/yt-dlp/config"
<<yt-dlp>>
#+END_SRC

** wireplumber
*** wireplumber config

#+NAME: wireplumber
#+BEGIN_SRC conf
monitor.alsa.rules = [
  {
    matches = [
      {
        object.path = "alsa:acp:PCH:6:playback"
      }
    ]
    actions = {
      update-props = {
        node.description = "laptop"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:PCH:0:capture"
      }
    ]
    actions = {
      update-props = {
        node.description = "mic"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:SoundSticks:1:playback"
      }
    ]
    actions = {
      update-props = {
        node.description = "speakers"
      }
    }
  },
  {
    matches = [
      {
        object.path = "alsa:acp:Snowball:0:capture"
      }
    ]
    actions = {
      update-props = {
        node.description = "yeti"
      }
    }
  }
]
#+END_SRC

*** wireplumber tangle

+ home dir

#+NAME: wireplumber-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/wireplumber/wireplumber.conf.d/device-rename.conf"
<<wireplumber>>
#+END_SRC

+ current dir

#+NAME: wireplumber-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/wireplumber/wireplumber.conf.d/device-rename.conf"
<<wireplumber>>
#+END_SRC

** kodi
*** kodi config
**** playercorefactory.xml

#+NAME: playercorefactory.xml
#+BEGIN_SRC xml
<playercorefactory>
 <players>
   <player name="save url" type="ExternalPlayer" audio="true" video="true">
	<filename>printf</filename>
     <args>"%s\n" "{0}" > "$HOME/desktop/url-$(date +"%Y-%m-%d-%H-%M-%S").txt"</args>
     <hidexbmc>false</hidexbmc>
   </player>
   <player name="play" type="ExternalPlayer" audio="false" video="true">
	<filename>"$HOME/.venv/pilfer/bin/pilferplay"</filename>
     <args>-i "{0}"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="mpv" type="ExternalPlayer" audio="false" video="true">
	<filename>mpv</filename>
     <args>"{0}"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="emacs" type="ExternalPlayer" audio="false" video="true">
	<filename>emacsclient</filename>
     <args>-u -e "(mpv-play-remote-video \"{0}\")"</args>
     <hidexbmc>true</hidexbmc>
   </player>  
   <player name="record video" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" &</args>
     <hidexbmc>false</hidexbmc>
   </player>  
   <player name="record video - 30 minutes" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 00:30:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 1 hour" type="ExternalPlayer" audio="false" video="true">
	<filename>"ts $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 01:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 2 hours" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 02:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record video - 3 hours" type="ExternalPlayer" audio="false" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-i "{0}" -t 03:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" &</args>
     <hidexbmc>false</hidexbmc>
   </player>  
   <player name="record audio - 30 minutes" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 00:30:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 1 hour" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 01:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 2 hours" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 02:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
   <player name="record audio - 3 hours" type="ExternalPlayer" audio="true" video="true">
	<filename>"tsp $HOME/.venv/pilfer/bin/pilfer"</filename>
     <args>-a "{0}" -t 03:00:00 &</args>
     <hidexbmc>false</hidexbmc>
   </player> 
 </players>
 <rules action="overwrite">
   <rule internetstream="true" player="mpv"></rule>
   <rule video="true" player="mpv"></rule>
   <!-- <rule internetstream="true" player="play"></rule> -->

   <!-- change the default player below -->

   <!-- <rule protocols="nfs|smb" player="dvdplayer"></rule> -->
   <!-- uncomment to make play the default player
    <rule video="true" player="play"></rule>
   -->
   
   <!-- uncomment to make record the default player
    <rule video="true" player="record"></rule>
   -->
   
 </rules>
</playercorefactory>
#+END_SRC

*** kodi tangle
**** playercorefactory.xml tangle

+ home dir

#+NAME: playercorefactory.xml-home-dir
#+BEGIN_SRC xml :noweb yes :tangle "~/.kodi/userdata/playercorefactory.xml"
<<playercorefactory.xml>>
#+END_SRC

+ current dir

#+NAME: playercorefactory.xml-current-dir
#+BEGIN_SRC xml :noweb yes :tangle ".kodi/userdata/playercorefactory.xml"
<<playercorefactory.xml>>
#+END_SRC

** aria2c
*** aria2c config

#+NAME: aria2c
#+begin_src conf
# aria2 config
bt-max-peers=0
bt-request-peer-speed-limit=0
max-overall-upload-limit=128k
bt-external-ip=127.0.0.1
dht-listen-port=6882
enable-dht=true
enable-peer-exchange=true
listen-port=6881
bt-force-encryption=true
bt-min-crypto-level=arc4
bt-require-crypto=true
follow-torrent=mem
seed-ratio=100
seed-time=0
socket-recv-buffer-size=1M
event-poll=epoll
realtime-chunk-checksum=true
allow-overwrite=true
always-resume=true
auto-file-renaming=false
continue=true
remote-time=true
peer-id-prefix=""
user-agent=""
summary-interval=0
ftp-pasv=true
ftp-reuse-connection=true
metalink-language=en-US
metalink-location=us
metalink-preferred-protocol=https
lowest-speed-limit=50K
max-concurrent-downloads=10
max-connection-per-server=3
min-split-size=5M
split=10
check-certificate=true
conditional-get=true
disable-ipv6=true
http-accept-gzip=true
#+end_src

*** aria2c tangle

+ home dir
  
#+NAME: aria2c-home-dir
#+begin_src conf :noweb yes :tangle "~/.config/aria2/aria2.conf"
<<aria2c>>
#+end_src

+ current dir

#+NAME: aria2c-current-dir
#+begin_src conf :noweb yes :tangle ".config/aria2/aria2.conf"
<<aria2c>>
#+end_src

** ncmpc
*** ncmpc config

#+NAME: ncmpc
#+BEGIN_SRC conf
## Configuration file for ncmpc (~/.ncmpc/config)
host = "/run/user/1000/mpd/socket"
screen-list = playlist browse
wrap-around = yes
seek-time = 30
list-format = "%name%|[%artist% - ]%title%|%file%"
status-format = "[%artist% - ]%title%|%shortfile%"
visible-bitrate = yes
enable-colors = no
color background = none
color title = none,black
color title-bold = blue,bold
color line = black
color line-flags = black,bold
color list = none
color list-bold = none,bold
color browser-directory = none
color browser-playlist = none
color progressbar = black
color status-state = black,bold
color status-song  = black
color status-time  = black
color alert = black,bold
#+END_SRC

*** ncmpc tangle

+ home dir

#+NAME: ncmpc-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/ncmpc/config"
<<ncmpc>>
#+END_SRC

+ current dir

#+NAME: ncmpc-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/ncmpc/config"
<<ncmpc>>
#+END_SRC

** xkb
*** rules
**** evdev
***** evdev config

#+NAME: evdev
#+BEGIN_SRC conf
! option = symbols
  custom:swap_sterling_numbersign = +custom(swap_sterling_numbersign)

! include %S/evdev
#+END_SRC

***** evdev tangle

+ home dir

#+NAME: evdev-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/rules/evdev"
<<evdev>>
#+END_SRC

+ current dir

#+NAME: evdev-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/rules/evdev"
<<evdev>>
#+END_SRC

**** evdev.xml
***** evdev.xml config

#+NAME: evdev.xml
#+BEGIN_SRC conf
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE xkbConfigRegistry SYSTEM "xkb.dtd">
<xkbConfigRegistry version="1.1">
  <layoutList>
    <layout>
      <configItem>
        <name>gb</name>
      </configItem>
      <variantList>
        <variant>
          <configItem>
            <name>swap_sterling_numbersign</name>
            <shortDescription>swap_sterling_numbersign</shortDescription>
            <description>GB(swap_sterling_numbersign)</description>
          </configItem>
        </variant>
      </variantList>
    </layout>
  </layoutList>
  <optionList>
    <group allowMultipleSelection="true">
      <configItem>
        <name>custom</name>
        <description>custom options</description>
      </configItem>
      <option>
        <configItem>
          <name>custom:swap_sterling_numbersign</name>
          <description>swap sterling and numbersign</description>
        </configItem>
      </option>
    </group>
  </optionList>
</xkbConfigRegistry>
#+END_SRC

***** evdev.xml tangle

+ home dir

#+NAME: evdev.xml-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/rules/evdev.xml"
<<evdev.xml>>
#+END_SRC

+ current dir

#+NAME: evdev.xml-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/rules/evdev.xml"
<<evdev.xml>>
#+END_SRC

*** symbols
**** custom
***** custom config

#+NAME: custom
#+BEGIN_SRC conf
// swap sterling and numbersign
partial modifier_keys
xkb_symbols "swap_sterling_numbersign" {
    key <AE03> { [ 3, numbersign, sterling ] };
};
#+END_SRC

***** custom tangle

+ home dir

#+NAME: custom-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/symbols/custom"
<<custom>>
#+END_SRC

+ current dir

#+NAME: custom-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/symbols/custom"
<<custom>>
#+END_SRC

**** gb
***** gb config

#+NAME: gb
#+BEGIN_SRC conf
// swap sterling and numbersign
default partial alphanumeric_keys 
xkb_symbols "swap_sterling_numbersign" {
    name[Group1]= "swap_sterling_numbersign - Mac";
    key <AE03> { [ 3, numbersign, sterling ] };
};
#+END_SRC

***** gb tangle

+ home dir

#+NAME: gb-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/xkb/symbols/gb"
<<gb>>
#+END_SRC

+ current dir

#+NAME: gb-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/xkb/symbols/gb"
<<gb>>
#+END_SRC

** autostart
*** autostart config
**** nognome_notications config

#+NAME: nognome_notications
#+BEGIN_SRC conf
[Desktop Entry]
Type=Application
Exec=/home/djwilcox/bin/nognome_notifications
Hidden=True
NoDisplay=True
X-GNOME-Autostart-enabled=true
Name=nognome_notifications
Comment=nognome_notifications
#+END_SRC

*** autostart tangle
**** nognome_notications tangle

+ home dir

#+NAME: nognome_notications-autostart-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/autostart/nognome_notications.desktop"
<<nognome_notications>>
#+END_SRC

+ current dir

#+NAME: nognome_notications-autostart-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/autostart/nognome_notications.desktop"
<<nognome_notications>>
#+END_SRC

** desktop files
*** desktop files config
**** davinci resolve config

#+NAME: davinci-resolve-desktop
#+begin_src conf
[Desktop Entry]
Name=DaVinci Resolve
GenericName=DaVinci Resolve
Exec=env __NV_PRIME_RENDER_OFFLOAD=1 __GLX_VENDOR_LIBRARY_NAME=nvidia davinci-resolve %u
Type=Application
Terminal=false
Icon=utilities-terminal
StartupNotify=true
StartupWMClass=resolve
MimeType=application/x-resolveproj;
#+end_src

**** firefox vpn config

#+NAME: firefox-vpn-desktop
#+begin_src conf
[Desktop Entry]
Actions=new-private-window;new-window;profile-manager-window
Categories=Network;WebBrowser
Exec=/run/wrappers/bin/doas /home/djwilcox/bin/namespace firefox %U
GenericName=Web Browser
Icon=firefox
MimeType=text/html;text/xml;application/xhtml+xml;application/vnd.mozilla.xul+xml;x-scheme-handler/http;x-scheme-handler/https
Name=Firefox-VPN
StartupNotify=true
Terminal=false
Type=Application
Version=1.4

[Desktop Action new-private-window]
Exec=/run/wrappers/bin/doas /home/djwilcox/bin/namespace firefox --private-window %U
Name=New Private Window

[Desktop Action new-window]
Exec=/run/wrappers/bin/doas /home/djwilcox/bin/namespace firefox --new-window %U
Name=New Window

[Desktop Action profile-manager-window]
Exec=/run/wrappers/bin/doas /home/djwilcox/bin/namespace firefox --ProfileManager
Name=Profile Manager
#+end_src

**** transmission config

#+NAME: transmission-desktop
#+begin_src conf
[Desktop Entry]
Name=Transmission
Exec=/home/djwilcox/bin/magnet-add %u
Icon=utilities-terminal
Type=Application
Terminal=false
MimeType=application/x-bittorrent;x-scheme-handler/magnet;
#+end_src

*** desktop files tangle
**** davinci resolve tangle

+ home dir
  
#+NAME: davinci-resolve-desktop-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.local/share/applications/davinci-resolve.desktop"
<<davinci-resolve-desktop>>
#+END_SRC
  
+ current dir

#+NAME: davinci-resolve-desktop-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".local/share/applications/davinci-resolve.desktop"
<<davinci-resolve-desktop>>
#+END_SRC

**** firefox-vpn tangle

+ home dir
  
#+NAME: firefox-vpn-desktop-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.local/share/applications/firefox_vpn.desktop"
<<firefox-vpn-desktop>>
#+END_SRC
  
+ current dir

#+NAME: firefox-vpn-desktop-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".local/share/applications/firefox_vpn.desktop"
<<firefox-vpn-desktop>>
#+END_SRC

**** transmission tangle

+ home dir
  
#+NAME: transmission-desktop-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.local/share/applications/transmission.desktop"
<<transmission-desktop>>
#+END_SRC
  
+ current dir

#+NAME: transmission-desktop-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".local/share/applications/transmission.desktop"
<<transmission-desktop>>
#+END_SRC

** gitconfig
*** gitconfig config

#+NAME: gitconfig
#+BEGIN_SRC conf
[user]
name = Daniel J Wilcox
email = danieljwilcox@gmail.com
[color]
ui = true
#+END_SRC

*** gitconfig tangle

+ home dir

#+NAME: gitconfig-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/git/config"
<<gitconfig>>
#+END_SRC

+ current dir

#+NAME: gitconfig-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/git/gitconfig"
<<gitconfig>>
#+END_SRC

** curl
*** curl config

#+NAME: curl
#+BEGIN_SRC conf
ssl_cipher_list = "DEFAULT"
#+END_SRC

*** curl tangle

+ home dir

#+NAME: curl-home-dir
#+BEGIN_SRC conf :noweb yes :tangle "~/.config/curl/curlrc"
<<curl>>
#+END_SRC

+ current dir

#+NAME: curl-current-dir
#+BEGIN_SRC conf :noweb yes :tangle ".config/curl/curlrc"
<<curl>>
#+END_SRC
